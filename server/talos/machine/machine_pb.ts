// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file machine/machine.proto (package machine, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ContainerdNamespace, ContainerDriver, DataSchema, Error, Metadata } from "../common/common_pb";
import { file_common_common } from "../common/common_pb";
import type { Any, Duration, EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file machine/machine.proto.
 */
export const file_machine_machine: GenFile = /*@__PURE__*/
  fileDesc("", [file_common_common, file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp]);

/**
 * rpc applyConfiguration
 * ApplyConfiguration describes a request to assert a new configuration upon a
 * node.
 *
 * @generated from message machine.ApplyConfigurationRequest
 */
export type ApplyConfigurationRequest = Message<"machine.ApplyConfigurationRequest"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * @generated from field: machine.ApplyConfigurationRequest.Mode mode = 4;
   */
  mode: ApplyConfigurationRequest_Mode;

  /**
   * @generated from field: bool dry_run = 5;
   */
  dryRun: boolean;

  /**
   * @generated from field: google.protobuf.Duration try_mode_timeout = 6;
   */
  tryModeTimeout?: Duration;
};

/**
 * Describes the message machine.ApplyConfigurationRequest.
 * Use `create(ApplyConfigurationRequestSchema)` to create a new message.
 */
export const ApplyConfigurationRequestSchema: GenMessage<ApplyConfigurationRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 0);

/**
 * @generated from enum machine.ApplyConfigurationRequest.Mode
 */
export enum ApplyConfigurationRequest_Mode {
  /**
   * @generated from enum value: REBOOT = 0;
   */
  REBOOT = 0,

  /**
   * @generated from enum value: AUTO = 1;
   */
  AUTO = 1,

  /**
   * @generated from enum value: NO_REBOOT = 2;
   */
  NO_REBOOT = 2,

  /**
   * @generated from enum value: STAGED = 3;
   */
  STAGED = 3,

  /**
   * @generated from enum value: TRY = 4;
   */
  TRY = 4,
}

/**
 * Describes the enum machine.ApplyConfigurationRequest.Mode.
 */
export const ApplyConfigurationRequest_ModeSchema: GenEnum<ApplyConfigurationRequest_Mode> = /*@__PURE__*/
  enumDesc(file_machine_machine, 0, 0);

/**
 * ApplyConfigurationResponse describes the response to a configuration request.
 *
 * @generated from message machine.ApplyConfiguration
 */
export type ApplyConfiguration = Message<"machine.ApplyConfiguration"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * Configuration validation warnings.
   *
   * @generated from field: repeated string warnings = 2;
   */
  warnings: string[];

  /**
   * States which mode was actually chosen.
   *
   * @generated from field: machine.ApplyConfigurationRequest.Mode mode = 3;
   */
  mode: ApplyConfigurationRequest_Mode;

  /**
   * Human-readable message explaining the result of the apply configuration call.
   *
   * @generated from field: string mode_details = 4;
   */
  modeDetails: string;
};

/**
 * Describes the message machine.ApplyConfiguration.
 * Use `create(ApplyConfigurationSchema)` to create a new message.
 */
export const ApplyConfigurationSchema: GenMessage<ApplyConfiguration> = /*@__PURE__*/
  messageDesc(file_machine_machine, 1);

/**
 * @generated from message machine.ApplyConfigurationResponse
 */
export type ApplyConfigurationResponse = Message<"machine.ApplyConfigurationResponse"> & {
  /**
   * @generated from field: repeated machine.ApplyConfiguration messages = 1;
   */
  messages: ApplyConfiguration[];
};

/**
 * Describes the message machine.ApplyConfigurationResponse.
 * Use `create(ApplyConfigurationResponseSchema)` to create a new message.
 */
export const ApplyConfigurationResponseSchema: GenMessage<ApplyConfigurationResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 2);

/**
 * rpc reboot
 *
 * @generated from message machine.RebootRequest
 */
export type RebootRequest = Message<"machine.RebootRequest"> & {
  /**
   * @generated from field: machine.RebootRequest.Mode mode = 1;
   */
  mode: RebootRequest_Mode;
};

/**
 * Describes the message machine.RebootRequest.
 * Use `create(RebootRequestSchema)` to create a new message.
 */
export const RebootRequestSchema: GenMessage<RebootRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 3);

/**
 * @generated from enum machine.RebootRequest.Mode
 */
export enum RebootRequest_Mode {
  /**
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * @generated from enum value: POWERCYCLE = 1;
   */
  POWERCYCLE = 1,
}

/**
 * Describes the enum machine.RebootRequest.Mode.
 */
export const RebootRequest_ModeSchema: GenEnum<RebootRequest_Mode> = /*@__PURE__*/
  enumDesc(file_machine_machine, 3, 0);

/**
 * The reboot message containing the reboot status.
 *
 * @generated from message machine.Reboot
 */
export type Reboot = Message<"machine.Reboot"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string actor_id = 2;
   */
  actorId: string;
};

/**
 * Describes the message machine.Reboot.
 * Use `create(RebootSchema)` to create a new message.
 */
export const RebootSchema: GenMessage<Reboot> = /*@__PURE__*/
  messageDesc(file_machine_machine, 4);

/**
 * @generated from message machine.RebootResponse
 */
export type RebootResponse = Message<"machine.RebootResponse"> & {
  /**
   * @generated from field: repeated machine.Reboot messages = 1;
   */
  messages: Reboot[];
};

/**
 * Describes the message machine.RebootResponse.
 * Use `create(RebootResponseSchema)` to create a new message.
 */
export const RebootResponseSchema: GenMessage<RebootResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 5);

/**
 * rpc Bootstrap
 *
 * @generated from message machine.BootstrapRequest
 */
export type BootstrapRequest = Message<"machine.BootstrapRequest"> & {
  /**
   * Enable etcd recovery from the snapshot.
   * Snapshot should be uploaded before this call via EtcdRecover RPC.
   *
   * @generated from field: bool recover_etcd = 1;
   */
  recoverEtcd: boolean;

  /**
   * Skip hash check on the snapshot (etcd).
   * Enable this when recovering from data directory copy to skip integrity check.
   *
   * @generated from field: bool recover_skip_hash_check = 2;
   */
  recoverSkipHashCheck: boolean;
};

/**
 * Describes the message machine.BootstrapRequest.
 * Use `create(BootstrapRequestSchema)` to create a new message.
 */
export const BootstrapRequestSchema: GenMessage<BootstrapRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 6);

/**
 * The bootstrap message containing the bootstrap status.
 *
 * @generated from message machine.Bootstrap
 */
export type Bootstrap = Message<"machine.Bootstrap"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.Bootstrap.
 * Use `create(BootstrapSchema)` to create a new message.
 */
export const BootstrapSchema: GenMessage<Bootstrap> = /*@__PURE__*/
  messageDesc(file_machine_machine, 7);

/**
 * @generated from message machine.BootstrapResponse
 */
export type BootstrapResponse = Message<"machine.BootstrapResponse"> & {
  /**
   * @generated from field: repeated machine.Bootstrap messages = 1;
   */
  messages: Bootstrap[];
};

/**
 * Describes the message machine.BootstrapResponse.
 * Use `create(BootstrapResponseSchema)` to create a new message.
 */
export const BootstrapResponseSchema: GenMessage<BootstrapResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 8);

/**
 * rpc events
 *
 * @generated from message machine.SequenceEvent
 */
export type SequenceEvent = Message<"machine.SequenceEvent"> & {
  /**
   * @generated from field: string sequence = 1;
   */
  sequence: string;

  /**
   * @generated from field: machine.SequenceEvent.Action action = 2;
   */
  action: SequenceEvent_Action;

  /**
   * @generated from field: common.Error error = 3;
   */
  error?: Error;
};

/**
 * Describes the message machine.SequenceEvent.
 * Use `create(SequenceEventSchema)` to create a new message.
 */
export const SequenceEventSchema: GenMessage<SequenceEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 9);

/**
 * @generated from enum machine.SequenceEvent.Action
 */
export enum SequenceEvent_Action {
  /**
   * @generated from enum value: NOOP = 0;
   */
  NOOP = 0,

  /**
   * @generated from enum value: START = 1;
   */
  START = 1,

  /**
   * @generated from enum value: STOP = 2;
   */
  STOP = 2,
}

/**
 * Describes the enum machine.SequenceEvent.Action.
 */
export const SequenceEvent_ActionSchema: GenEnum<SequenceEvent_Action> = /*@__PURE__*/
  enumDesc(file_machine_machine, 9, 0);

/**
 * @generated from message machine.PhaseEvent
 */
export type PhaseEvent = Message<"machine.PhaseEvent"> & {
  /**
   * @generated from field: string phase = 1;
   */
  phase: string;

  /**
   * @generated from field: machine.PhaseEvent.Action action = 2;
   */
  action: PhaseEvent_Action;
};

/**
 * Describes the message machine.PhaseEvent.
 * Use `create(PhaseEventSchema)` to create a new message.
 */
export const PhaseEventSchema: GenMessage<PhaseEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 10);

/**
 * @generated from enum machine.PhaseEvent.Action
 */
export enum PhaseEvent_Action {
  /**
   * @generated from enum value: START = 0;
   */
  START = 0,

  /**
   * @generated from enum value: STOP = 1;
   */
  STOP = 1,
}

/**
 * Describes the enum machine.PhaseEvent.Action.
 */
export const PhaseEvent_ActionSchema: GenEnum<PhaseEvent_Action> = /*@__PURE__*/
  enumDesc(file_machine_machine, 10, 0);

/**
 * @generated from message machine.TaskEvent
 */
export type TaskEvent = Message<"machine.TaskEvent"> & {
  /**
   * @generated from field: string task = 1;
   */
  task: string;

  /**
   * @generated from field: machine.TaskEvent.Action action = 2;
   */
  action: TaskEvent_Action;
};

/**
 * Describes the message machine.TaskEvent.
 * Use `create(TaskEventSchema)` to create a new message.
 */
export const TaskEventSchema: GenMessage<TaskEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 11);

/**
 * @generated from enum machine.TaskEvent.Action
 */
export enum TaskEvent_Action {
  /**
   * @generated from enum value: START = 0;
   */
  START = 0,

  /**
   * @generated from enum value: STOP = 1;
   */
  STOP = 1,
}

/**
 * Describes the enum machine.TaskEvent.Action.
 */
export const TaskEvent_ActionSchema: GenEnum<TaskEvent_Action> = /*@__PURE__*/
  enumDesc(file_machine_machine, 11, 0);

/**
 * @generated from message machine.ServiceStateEvent
 */
export type ServiceStateEvent = Message<"machine.ServiceStateEvent"> & {
  /**
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * @generated from field: machine.ServiceStateEvent.Action action = 2;
   */
  action: ServiceStateEvent_Action;

  /**
   * @generated from field: string message = 3;
   */
  message: string;

  /**
   * @generated from field: machine.ServiceHealth health = 4;
   */
  health?: ServiceHealth;
};

/**
 * Describes the message machine.ServiceStateEvent.
 * Use `create(ServiceStateEventSchema)` to create a new message.
 */
export const ServiceStateEventSchema: GenMessage<ServiceStateEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 12);

/**
 * @generated from enum machine.ServiceStateEvent.Action
 */
export enum ServiceStateEvent_Action {
  /**
   * @generated from enum value: INITIALIZED = 0;
   */
  INITIALIZED = 0,

  /**
   * @generated from enum value: PREPARING = 1;
   */
  PREPARING = 1,

  /**
   * @generated from enum value: WAITING = 2;
   */
  WAITING = 2,

  /**
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * @generated from enum value: STOPPING = 4;
   */
  STOPPING = 4,

  /**
   * @generated from enum value: FINISHED = 5;
   */
  FINISHED = 5,

  /**
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,

  /**
   * @generated from enum value: SKIPPED = 7;
   */
  SKIPPED = 7,

  /**
   * @generated from enum value: STARTING = 8;
   */
  STARTING = 8,
}

/**
 * Describes the enum machine.ServiceStateEvent.Action.
 */
export const ServiceStateEvent_ActionSchema: GenEnum<ServiceStateEvent_Action> = /*@__PURE__*/
  enumDesc(file_machine_machine, 12, 0);

/**
 * @generated from message machine.RestartEvent
 */
export type RestartEvent = Message<"machine.RestartEvent"> & {
  /**
   * @generated from field: int64 cmd = 1;
   */
  cmd: bigint;
};

/**
 * Describes the message machine.RestartEvent.
 * Use `create(RestartEventSchema)` to create a new message.
 */
export const RestartEventSchema: GenMessage<RestartEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 13);

/**
 * ConfigLoadErrorEvent is reported when the config loading has failed.
 *
 * @generated from message machine.ConfigLoadErrorEvent
 */
export type ConfigLoadErrorEvent = Message<"machine.ConfigLoadErrorEvent"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;
};

/**
 * Describes the message machine.ConfigLoadErrorEvent.
 * Use `create(ConfigLoadErrorEventSchema)` to create a new message.
 */
export const ConfigLoadErrorEventSchema: GenMessage<ConfigLoadErrorEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 14);

/**
 * ConfigValidationErrorEvent is reported when config validation has failed.
 *
 * @generated from message machine.ConfigValidationErrorEvent
 */
export type ConfigValidationErrorEvent = Message<"machine.ConfigValidationErrorEvent"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;
};

/**
 * Describes the message machine.ConfigValidationErrorEvent.
 * Use `create(ConfigValidationErrorEventSchema)` to create a new message.
 */
export const ConfigValidationErrorEventSchema: GenMessage<ConfigValidationErrorEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 15);

/**
 * AddressEvent reports node endpoints aggregated from k8s.Endpoints and network.Hostname.
 *
 * @generated from message machine.AddressEvent
 */
export type AddressEvent = Message<"machine.AddressEvent"> & {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  /**
   * @generated from field: repeated string addresses = 2;
   */
  addresses: string[];
};

/**
 * Describes the message machine.AddressEvent.
 * Use `create(AddressEventSchema)` to create a new message.
 */
export const AddressEventSchema: GenMessage<AddressEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 16);

/**
 * MachineStatusEvent reports changes to the MachineStatus resource.
 *
 * @generated from message machine.MachineStatusEvent
 */
export type MachineStatusEvent = Message<"machine.MachineStatusEvent"> & {
  /**
   * @generated from field: machine.MachineStatusEvent.MachineStage stage = 1;
   */
  stage: MachineStatusEvent_MachineStage;

  /**
   * @generated from field: machine.MachineStatusEvent.MachineStatus status = 2;
   */
  status?: MachineStatusEvent_MachineStatus;
};

/**
 * Describes the message machine.MachineStatusEvent.
 * Use `create(MachineStatusEventSchema)` to create a new message.
 */
export const MachineStatusEventSchema: GenMessage<MachineStatusEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 17);

/**
 * @generated from message machine.MachineStatusEvent.MachineStatus
 */
export type MachineStatusEvent_MachineStatus = Message<"machine.MachineStatusEvent.MachineStatus"> & {
  /**
   * @generated from field: bool ready = 1;
   */
  ready: boolean;

  /**
   * @generated from field: repeated machine.MachineStatusEvent.MachineStatus.UnmetCondition unmet_conditions = 2;
   */
  unmetConditions: MachineStatusEvent_MachineStatus_UnmetCondition[];
};

/**
 * Describes the message machine.MachineStatusEvent.MachineStatus.
 * Use `create(MachineStatusEvent_MachineStatusSchema)` to create a new message.
 */
export const MachineStatusEvent_MachineStatusSchema: GenMessage<MachineStatusEvent_MachineStatus> = /*@__PURE__*/
  messageDesc(file_machine_machine, 17, 0);

/**
 * @generated from message machine.MachineStatusEvent.MachineStatus.UnmetCondition
 */
export type MachineStatusEvent_MachineStatus_UnmetCondition = Message<"machine.MachineStatusEvent.MachineStatus.UnmetCondition"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message machine.MachineStatusEvent.MachineStatus.UnmetCondition.
 * Use `create(MachineStatusEvent_MachineStatus_UnmetConditionSchema)` to create a new message.
 */
export const MachineStatusEvent_MachineStatus_UnmetConditionSchema: GenMessage<MachineStatusEvent_MachineStatus_UnmetCondition> = /*@__PURE__*/
  messageDesc(file_machine_machine, 17, 0, 0);

/**
 * @generated from enum machine.MachineStatusEvent.MachineStage
 */
export enum MachineStatusEvent_MachineStage {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: BOOTING = 1;
   */
  BOOTING = 1,

  /**
   * @generated from enum value: INSTALLING = 2;
   */
  INSTALLING = 2,

  /**
   * @generated from enum value: MAINTENANCE = 3;
   */
  MAINTENANCE = 3,

  /**
   * @generated from enum value: RUNNING = 4;
   */
  RUNNING = 4,

  /**
   * @generated from enum value: REBOOTING = 5;
   */
  REBOOTING = 5,

  /**
   * @generated from enum value: SHUTTING_DOWN = 6;
   */
  SHUTTING_DOWN = 6,

  /**
   * @generated from enum value: RESETTING = 7;
   */
  RESETTING = 7,

  /**
   * @generated from enum value: UPGRADING = 8;
   */
  UPGRADING = 8,
}

/**
 * Describes the enum machine.MachineStatusEvent.MachineStage.
 */
export const MachineStatusEvent_MachineStageSchema: GenEnum<MachineStatusEvent_MachineStage> = /*@__PURE__*/
  enumDesc(file_machine_machine, 17, 0);

/**
 * @generated from message machine.EventsRequest
 */
export type EventsRequest = Message<"machine.EventsRequest"> & {
  /**
   * @generated from field: int32 tail_events = 1;
   */
  tailEvents: number;

  /**
   * @generated from field: string tail_id = 2;
   */
  tailId: string;

  /**
   * @generated from field: int32 tail_seconds = 3;
   */
  tailSeconds: number;

  /**
   * @generated from field: string with_actor_id = 4;
   */
  withActorId: string;
};

/**
 * Describes the message machine.EventsRequest.
 * Use `create(EventsRequestSchema)` to create a new message.
 */
export const EventsRequestSchema: GenMessage<EventsRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 18);

/**
 * @generated from message machine.Event
 */
export type Event = Message<"machine.Event"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: google.protobuf.Any data = 2;
   */
  data?: Any;

  /**
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * @generated from field: string actor_id = 4;
   */
  actorId: string;
};

/**
 * Describes the message machine.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_machine_machine, 19);

/**
 * rpc reset
 *
 * @generated from message machine.ResetPartitionSpec
 */
export type ResetPartitionSpec = Message<"machine.ResetPartitionSpec"> & {
  /**
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * @generated from field: bool wipe = 2;
   */
  wipe: boolean;
};

/**
 * Describes the message machine.ResetPartitionSpec.
 * Use `create(ResetPartitionSpecSchema)` to create a new message.
 */
export const ResetPartitionSpecSchema: GenMessage<ResetPartitionSpec> = /*@__PURE__*/
  messageDesc(file_machine_machine, 20);

/**
 * @generated from message machine.ResetRequest
 */
export type ResetRequest = Message<"machine.ResetRequest"> & {
  /**
   * Graceful indicates whether node should leave etcd before the upgrade, it also
   * enforces etcd checks before leaving.
   *
   * @generated from field: bool graceful = 1;
   */
  graceful: boolean;

  /**
   * Reboot indicates whether node should reboot or halt after resetting.
   *
   * @generated from field: bool reboot = 2;
   */
  reboot: boolean;

  /**
   * System_partitions_to_wipe lists specific system disk partitions to be reset (wiped).
   * If system_partitions_to_wipe is empty, all the partitions are erased.
   *
   * @generated from field: repeated machine.ResetPartitionSpec system_partitions_to_wipe = 3;
   */
  systemPartitionsToWipe: ResetPartitionSpec[];

  /**
   * UserDisksToWipe lists specific connected block devices to be reset (wiped).
   *
   * @generated from field: repeated string user_disks_to_wipe = 4;
   */
  userDisksToWipe: string[];

  /**
   * WipeMode defines which devices should be wiped.
   *
   * @generated from field: machine.ResetRequest.WipeMode mode = 5;
   */
  mode: ResetRequest_WipeMode;
};

/**
 * Describes the message machine.ResetRequest.
 * Use `create(ResetRequestSchema)` to create a new message.
 */
export const ResetRequestSchema: GenMessage<ResetRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 21);

/**
 * @generated from enum machine.ResetRequest.WipeMode
 */
export enum ResetRequest_WipeMode {
  /**
   * @generated from enum value: ALL = 0;
   */
  ALL = 0,

  /**
   * @generated from enum value: SYSTEM_DISK = 1;
   */
  SYSTEM_DISK = 1,

  /**
   * @generated from enum value: USER_DISKS = 2;
   */
  USER_DISKS = 2,
}

/**
 * Describes the enum machine.ResetRequest.WipeMode.
 */
export const ResetRequest_WipeModeSchema: GenEnum<ResetRequest_WipeMode> = /*@__PURE__*/
  enumDesc(file_machine_machine, 21, 0);

/**
 * The reset message containing the restart status.
 *
 * @generated from message machine.Reset
 */
export type Reset = Message<"machine.Reset"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string actor_id = 2;
   */
  actorId: string;
};

/**
 * Describes the message machine.Reset.
 * Use `create(ResetSchema)` to create a new message.
 */
export const ResetSchema: GenMessage<Reset> = /*@__PURE__*/
  messageDesc(file_machine_machine, 22);

/**
 * @generated from message machine.ResetResponse
 */
export type ResetResponse = Message<"machine.ResetResponse"> & {
  /**
   * @generated from field: repeated machine.Reset messages = 1;
   */
  messages: Reset[];
};

/**
 * Describes the message machine.ResetResponse.
 * Use `create(ResetResponseSchema)` to create a new message.
 */
export const ResetResponseSchema: GenMessage<ResetResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 23);

/**
 * rpc shutdown
 * The messages message containing the shutdown status.
 *
 * @generated from message machine.Shutdown
 */
export type Shutdown = Message<"machine.Shutdown"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string actor_id = 2;
   */
  actorId: string;
};

/**
 * Describes the message machine.Shutdown.
 * Use `create(ShutdownSchema)` to create a new message.
 */
export const ShutdownSchema: GenMessage<Shutdown> = /*@__PURE__*/
  messageDesc(file_machine_machine, 24);

/**
 * @generated from message machine.ShutdownRequest
 */
export type ShutdownRequest = Message<"machine.ShutdownRequest"> & {
  /**
   * Force indicates whether node should shutdown without first cordening and draining
   *
   * @generated from field: bool force = 1;
   */
  force: boolean;
};

/**
 * Describes the message machine.ShutdownRequest.
 * Use `create(ShutdownRequestSchema)` to create a new message.
 */
export const ShutdownRequestSchema: GenMessage<ShutdownRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 25);

/**
 * @generated from message machine.ShutdownResponse
 */
export type ShutdownResponse = Message<"machine.ShutdownResponse"> & {
  /**
   * @generated from field: repeated machine.Shutdown messages = 1;
   */
  messages: Shutdown[];
};

/**
 * Describes the message machine.ShutdownResponse.
 * Use `create(ShutdownResponseSchema)` to create a new message.
 */
export const ShutdownResponseSchema: GenMessage<ShutdownResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 26);

/**
 * rpc upgrade
 *
 * @generated from message machine.UpgradeRequest
 */
export type UpgradeRequest = Message<"machine.UpgradeRequest"> & {
  /**
   * @generated from field: string image = 1;
   */
  image: string;

  /**
   * @generated from field: bool preserve = 2;
   */
  preserve: boolean;

  /**
   * @generated from field: bool stage = 3;
   */
  stage: boolean;

  /**
   * @generated from field: bool force = 4;
   */
  force: boolean;

  /**
   * @generated from field: machine.UpgradeRequest.RebootMode reboot_mode = 5;
   */
  rebootMode: UpgradeRequest_RebootMode;
};

/**
 * Describes the message machine.UpgradeRequest.
 * Use `create(UpgradeRequestSchema)` to create a new message.
 */
export const UpgradeRequestSchema: GenMessage<UpgradeRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 27);

/**
 * @generated from enum machine.UpgradeRequest.RebootMode
 */
export enum UpgradeRequest_RebootMode {
  /**
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * @generated from enum value: POWERCYCLE = 1;
   */
  POWERCYCLE = 1,
}

/**
 * Describes the enum machine.UpgradeRequest.RebootMode.
 */
export const UpgradeRequest_RebootModeSchema: GenEnum<UpgradeRequest_RebootMode> = /*@__PURE__*/
  enumDesc(file_machine_machine, 27, 0);

/**
 * @generated from message machine.Upgrade
 */
export type Upgrade = Message<"machine.Upgrade"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string ack = 2;
   */
  ack: string;

  /**
   * @generated from field: string actor_id = 3;
   */
  actorId: string;
};

/**
 * Describes the message machine.Upgrade.
 * Use `create(UpgradeSchema)` to create a new message.
 */
export const UpgradeSchema: GenMessage<Upgrade> = /*@__PURE__*/
  messageDesc(file_machine_machine, 28);

/**
 * @generated from message machine.UpgradeResponse
 */
export type UpgradeResponse = Message<"machine.UpgradeResponse"> & {
  /**
   * @generated from field: repeated machine.Upgrade messages = 1;
   */
  messages: Upgrade[];
};

/**
 * Describes the message machine.UpgradeResponse.
 * Use `create(UpgradeResponseSchema)` to create a new message.
 */
export const UpgradeResponseSchema: GenMessage<UpgradeResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 29);

/**
 * rpc servicelist
 *
 * @generated from message machine.ServiceList
 */
export type ServiceList = Message<"machine.ServiceList"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.ServiceInfo services = 2;
   */
  services: ServiceInfo[];
};

/**
 * Describes the message machine.ServiceList.
 * Use `create(ServiceListSchema)` to create a new message.
 */
export const ServiceListSchema: GenMessage<ServiceList> = /*@__PURE__*/
  messageDesc(file_machine_machine, 30);

/**
 * @generated from message machine.ServiceListResponse
 */
export type ServiceListResponse = Message<"machine.ServiceListResponse"> & {
  /**
   * @generated from field: repeated machine.ServiceList messages = 1;
   */
  messages: ServiceList[];
};

/**
 * Describes the message machine.ServiceListResponse.
 * Use `create(ServiceListResponseSchema)` to create a new message.
 */
export const ServiceListResponseSchema: GenMessage<ServiceListResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 31);

/**
 * @generated from message machine.ServiceInfo
 */
export type ServiceInfo = Message<"machine.ServiceInfo"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string state = 2;
   */
  state: string;

  /**
   * @generated from field: machine.ServiceEvents events = 3;
   */
  events?: ServiceEvents;

  /**
   * @generated from field: machine.ServiceHealth health = 4;
   */
  health?: ServiceHealth;
};

/**
 * Describes the message machine.ServiceInfo.
 * Use `create(ServiceInfoSchema)` to create a new message.
 */
export const ServiceInfoSchema: GenMessage<ServiceInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 32);

/**
 * @generated from message machine.ServiceEvents
 */
export type ServiceEvents = Message<"machine.ServiceEvents"> & {
  /**
   * @generated from field: repeated machine.ServiceEvent events = 1;
   */
  events: ServiceEvent[];
};

/**
 * Describes the message machine.ServiceEvents.
 * Use `create(ServiceEventsSchema)` to create a new message.
 */
export const ServiceEventsSchema: GenMessage<ServiceEvents> = /*@__PURE__*/
  messageDesc(file_machine_machine, 33);

/**
 * @generated from message machine.ServiceEvent
 */
export type ServiceEvent = Message<"machine.ServiceEvent"> & {
  /**
   * @generated from field: string msg = 1;
   */
  msg: string;

  /**
   * @generated from field: string state = 2;
   */
  state: string;

  /**
   * @generated from field: google.protobuf.Timestamp ts = 3;
   */
  ts?: Timestamp;
};

/**
 * Describes the message machine.ServiceEvent.
 * Use `create(ServiceEventSchema)` to create a new message.
 */
export const ServiceEventSchema: GenMessage<ServiceEvent> = /*@__PURE__*/
  messageDesc(file_machine_machine, 34);

/**
 * @generated from message machine.ServiceHealth
 */
export type ServiceHealth = Message<"machine.ServiceHealth"> & {
  /**
   * @generated from field: bool unknown = 1;
   */
  unknown: boolean;

  /**
   * @generated from field: bool healthy = 2;
   */
  healthy: boolean;

  /**
   * @generated from field: string last_message = 3;
   */
  lastMessage: string;

  /**
   * @generated from field: google.protobuf.Timestamp last_change = 4;
   */
  lastChange?: Timestamp;
};

/**
 * Describes the message machine.ServiceHealth.
 * Use `create(ServiceHealthSchema)` to create a new message.
 */
export const ServiceHealthSchema: GenMessage<ServiceHealth> = /*@__PURE__*/
  messageDesc(file_machine_machine, 35);

/**
 * rpc servicestart
 *
 * @generated from message machine.ServiceStartRequest
 */
export type ServiceStartRequest = Message<"machine.ServiceStartRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message machine.ServiceStartRequest.
 * Use `create(ServiceStartRequestSchema)` to create a new message.
 */
export const ServiceStartRequestSchema: GenMessage<ServiceStartRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 36);

/**
 * @generated from message machine.ServiceStart
 */
export type ServiceStart = Message<"machine.ServiceStart"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string resp = 2;
   */
  resp: string;
};

/**
 * Describes the message machine.ServiceStart.
 * Use `create(ServiceStartSchema)` to create a new message.
 */
export const ServiceStartSchema: GenMessage<ServiceStart> = /*@__PURE__*/
  messageDesc(file_machine_machine, 37);

/**
 * @generated from message machine.ServiceStartResponse
 */
export type ServiceStartResponse = Message<"machine.ServiceStartResponse"> & {
  /**
   * @generated from field: repeated machine.ServiceStart messages = 1;
   */
  messages: ServiceStart[];
};

/**
 * Describes the message machine.ServiceStartResponse.
 * Use `create(ServiceStartResponseSchema)` to create a new message.
 */
export const ServiceStartResponseSchema: GenMessage<ServiceStartResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 38);

/**
 * @generated from message machine.ServiceStopRequest
 */
export type ServiceStopRequest = Message<"machine.ServiceStopRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message machine.ServiceStopRequest.
 * Use `create(ServiceStopRequestSchema)` to create a new message.
 */
export const ServiceStopRequestSchema: GenMessage<ServiceStopRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 39);

/**
 * @generated from message machine.ServiceStop
 */
export type ServiceStop = Message<"machine.ServiceStop"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string resp = 2;
   */
  resp: string;
};

/**
 * Describes the message machine.ServiceStop.
 * Use `create(ServiceStopSchema)` to create a new message.
 */
export const ServiceStopSchema: GenMessage<ServiceStop> = /*@__PURE__*/
  messageDesc(file_machine_machine, 40);

/**
 * @generated from message machine.ServiceStopResponse
 */
export type ServiceStopResponse = Message<"machine.ServiceStopResponse"> & {
  /**
   * @generated from field: repeated machine.ServiceStop messages = 1;
   */
  messages: ServiceStop[];
};

/**
 * Describes the message machine.ServiceStopResponse.
 * Use `create(ServiceStopResponseSchema)` to create a new message.
 */
export const ServiceStopResponseSchema: GenMessage<ServiceStopResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 41);

/**
 * @generated from message machine.ServiceRestartRequest
 */
export type ServiceRestartRequest = Message<"machine.ServiceRestartRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message machine.ServiceRestartRequest.
 * Use `create(ServiceRestartRequestSchema)` to create a new message.
 */
export const ServiceRestartRequestSchema: GenMessage<ServiceRestartRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 42);

/**
 * @generated from message machine.ServiceRestart
 */
export type ServiceRestart = Message<"machine.ServiceRestart"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string resp = 2;
   */
  resp: string;
};

/**
 * Describes the message machine.ServiceRestart.
 * Use `create(ServiceRestartSchema)` to create a new message.
 */
export const ServiceRestartSchema: GenMessage<ServiceRestart> = /*@__PURE__*/
  messageDesc(file_machine_machine, 43);

/**
 * @generated from message machine.ServiceRestartResponse
 */
export type ServiceRestartResponse = Message<"machine.ServiceRestartResponse"> & {
  /**
   * @generated from field: repeated machine.ServiceRestart messages = 1;
   */
  messages: ServiceRestart[];
};

/**
 * Describes the message machine.ServiceRestartResponse.
 * Use `create(ServiceRestartResponseSchema)` to create a new message.
 */
export const ServiceRestartResponseSchema: GenMessage<ServiceRestartResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 44);

/**
 * CopyRequest describes a request to copy data out of Talos node
 *
 * Copy produces .tar.gz archive which is streamed back to the caller
 *
 * @generated from message machine.CopyRequest
 */
export type CopyRequest = Message<"machine.CopyRequest"> & {
  /**
   * Root path to start copying data out, it might be either a file or directory
   *
   * @generated from field: string root_path = 1;
   */
  rootPath: string;
};

/**
 * Describes the message machine.CopyRequest.
 * Use `create(CopyRequestSchema)` to create a new message.
 */
export const CopyRequestSchema: GenMessage<CopyRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 45);

/**
 * ListRequest describes a request to list the contents of a directory.
 *
 * @generated from message machine.ListRequest
 */
export type ListRequest = Message<"machine.ListRequest"> & {
  /**
   * Root indicates the root directory for the list. If not indicated, '/' is
   * presumed.
   *
   * @generated from field: string root = 1;
   */
  root: string;

  /**
   * Recurse indicates that subdirectories should be recursed.
   *
   * @generated from field: bool recurse = 2;
   */
  recurse: boolean;

  /**
   * RecursionDepth indicates how many levels of subdirectories should be
   * recursed. The default (0) indicates that no limit should be enforced.
   *
   * @generated from field: int32 recursion_depth = 3;
   */
  recursionDepth: number;

  /**
   * Types indicates what file type should be returned. If not indicated,
   * all files will be returned.
   *
   * @generated from field: repeated machine.ListRequest.Type types = 4;
   */
  types: ListRequest_Type[];

  /**
   * Report xattrs
   *
   * @generated from field: bool report_xattrs = 5;
   */
  reportXattrs: boolean;
};

/**
 * Describes the message machine.ListRequest.
 * Use `create(ListRequestSchema)` to create a new message.
 */
export const ListRequestSchema: GenMessage<ListRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 46);

/**
 * File type.
 *
 * @generated from enum machine.ListRequest.Type
 */
export enum ListRequest_Type {
  /**
   * Regular file (not directory, symlink, etc).
   *
   * @generated from enum value: REGULAR = 0;
   */
  REGULAR = 0,

  /**
   * Directory.
   *
   * @generated from enum value: DIRECTORY = 1;
   */
  DIRECTORY = 1,

  /**
   * Symbolic link.
   *
   * @generated from enum value: SYMLINK = 2;
   */
  SYMLINK = 2,
}

/**
 * Describes the enum machine.ListRequest.Type.
 */
export const ListRequest_TypeSchema: GenEnum<ListRequest_Type> = /*@__PURE__*/
  enumDesc(file_machine_machine, 46, 0);

/**
 * DiskUsageRequest describes a request to list disk usage of directories and regular files
 *
 * @generated from message machine.DiskUsageRequest
 */
export type DiskUsageRequest = Message<"machine.DiskUsageRequest"> & {
  /**
   * RecursionDepth indicates how many levels of subdirectories should be
   * recursed. The default (0) indicates that no limit should be enforced.
   *
   * @generated from field: int32 recursion_depth = 1;
   */
  recursionDepth: number;

  /**
   * All write sizes for all files, not just directories.
   *
   * @generated from field: bool all = 2;
   */
  all: boolean;

  /**
   * Threshold exclude entries smaller than SIZE if positive,
   * or entries greater than SIZE if negative.
   *
   * @generated from field: int64 threshold = 3;
   */
  threshold: bigint;

  /**
   * DiskUsagePaths is the list of directories to calculate disk usage for.
   *
   * @generated from field: repeated string paths = 4;
   */
  paths: string[];
};

/**
 * Describes the message machine.DiskUsageRequest.
 * Use `create(DiskUsageRequestSchema)` to create a new message.
 */
export const DiskUsageRequestSchema: GenMessage<DiskUsageRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 47);

/**
 * FileInfo describes a file or directory's information
 *
 * @generated from message machine.FileInfo
 */
export type FileInfo = Message<"machine.FileInfo"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * Name is the name (including prefixed path) of the file or directory
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Size indicates the number of bytes contained within the file
   *
   * @generated from field: int64 size = 3;
   */
  size: bigint;

  /**
   * Mode is the bitmap of UNIX mode/permission flags of the file
   *
   * @generated from field: uint32 mode = 4;
   */
  mode: number;

  /**
   * Modified indicates the UNIX timestamp at which the file was last modified
   *
   * @generated from field: int64 modified = 5;
   */
  modified: bigint;

  /**
   * IsDir indicates that the file is a directory
   *
   * @generated from field: bool is_dir = 6;
   */
  isDir: boolean;

  /**
   * Error describes any error encountered while trying to read the file
   * information.
   *
   * @generated from field: string error = 7;
   */
  error: string;

  /**
   * Link is filled with symlink target
   *
   * @generated from field: string link = 8;
   */
  link: string;

  /**
   * RelativeName is the name of the file or directory relative to the RootPath
   *
   * @generated from field: string relative_name = 9;
   */
  relativeName: string;

  /**
   * Owner uid
   *
   * @generated from field: uint32 uid = 10;
   */
  uid: number;

  /**
   * Owner gid
   *
   * @generated from field: uint32 gid = 11;
   */
  gid: number;

  /**
   * Extended attributes (if present and requested)
   *
   * @generated from field: repeated machine.Xattr xattrs = 12;
   */
  xattrs: Xattr[];
};

/**
 * Describes the message machine.FileInfo.
 * Use `create(FileInfoSchema)` to create a new message.
 */
export const FileInfoSchema: GenMessage<FileInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 48);

/**
 * @generated from message machine.Xattr
 */
export type Xattr = Message<"machine.Xattr"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message machine.Xattr.
 * Use `create(XattrSchema)` to create a new message.
 */
export const XattrSchema: GenMessage<Xattr> = /*@__PURE__*/
  messageDesc(file_machine_machine, 49);

/**
 * DiskUsageInfo describes a file or directory's information for du command
 *
 * @generated from message machine.DiskUsageInfo
 */
export type DiskUsageInfo = Message<"machine.DiskUsageInfo"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * Name is the name (including prefixed path) of the file or directory
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Size indicates the number of bytes contained within the file
   *
   * @generated from field: int64 size = 3;
   */
  size: bigint;

  /**
   * Error describes any error encountered while trying to read the file
   * information.
   *
   * @generated from field: string error = 4;
   */
  error: string;

  /**
   * RelativeName is the name of the file or directory relative to the RootPath
   *
   * @generated from field: string relative_name = 5;
   */
  relativeName: string;
};

/**
 * Describes the message machine.DiskUsageInfo.
 * Use `create(DiskUsageInfoSchema)` to create a new message.
 */
export const DiskUsageInfoSchema: GenMessage<DiskUsageInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 50);

/**
 * The messages message containing the requested df stats.
 *
 * @generated from message machine.Mounts
 */
export type Mounts = Message<"machine.Mounts"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.MountStat stats = 2;
   */
  stats: MountStat[];
};

/**
 * Describes the message machine.Mounts.
 * Use `create(MountsSchema)` to create a new message.
 */
export const MountsSchema: GenMessage<Mounts> = /*@__PURE__*/
  messageDesc(file_machine_machine, 51);

/**
 * @generated from message machine.MountsResponse
 */
export type MountsResponse = Message<"machine.MountsResponse"> & {
  /**
   * @generated from field: repeated machine.Mounts messages = 1;
   */
  messages: Mounts[];
};

/**
 * Describes the message machine.MountsResponse.
 * Use `create(MountsResponseSchema)` to create a new message.
 */
export const MountsResponseSchema: GenMessage<MountsResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 52);

/**
 * The messages message containing the requested processes.
 *
 * @generated from message machine.MountStat
 */
export type MountStat = Message<"machine.MountStat"> & {
  /**
   * @generated from field: string filesystem = 1;
   */
  filesystem: string;

  /**
   * @generated from field: uint64 size = 2;
   */
  size: bigint;

  /**
   * @generated from field: uint64 available = 3;
   */
  available: bigint;

  /**
   * @generated from field: string mounted_on = 4;
   */
  mountedOn: string;
};

/**
 * Describes the message machine.MountStat.
 * Use `create(MountStatSchema)` to create a new message.
 */
export const MountStatSchema: GenMessage<MountStat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 53);

/**
 * @generated from message machine.Version
 */
export type Version = Message<"machine.Version"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: machine.VersionInfo version = 2;
   */
  version?: VersionInfo;

  /**
   * @generated from field: machine.PlatformInfo platform = 3;
   */
  platform?: PlatformInfo;

  /**
   * Features describe individual Talos features that can be switched on or off.
   *
   * @generated from field: machine.FeaturesInfo features = 4;
   */
  features?: FeaturesInfo;
};

/**
 * Describes the message machine.Version.
 * Use `create(VersionSchema)` to create a new message.
 */
export const VersionSchema: GenMessage<Version> = /*@__PURE__*/
  messageDesc(file_machine_machine, 54);

/**
 * @generated from message machine.VersionResponse
 */
export type VersionResponse = Message<"machine.VersionResponse"> & {
  /**
   * @generated from field: repeated machine.Version messages = 1;
   */
  messages: Version[];
};

/**
 * Describes the message machine.VersionResponse.
 * Use `create(VersionResponseSchema)` to create a new message.
 */
export const VersionResponseSchema: GenMessage<VersionResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 55);

/**
 * @generated from message machine.VersionInfo
 */
export type VersionInfo = Message<"machine.VersionInfo"> & {
  /**
   * @generated from field: string tag = 1;
   */
  tag: string;

  /**
   * @generated from field: string sha = 2;
   */
  sha: string;

  /**
   * @generated from field: string built = 3;
   */
  built: string;

  /**
   * @generated from field: string go_version = 4;
   */
  goVersion: string;

  /**
   * @generated from field: string os = 5;
   */
  os: string;

  /**
   * @generated from field: string arch = 6;
   */
  arch: string;
};

/**
 * Describes the message machine.VersionInfo.
 * Use `create(VersionInfoSchema)` to create a new message.
 */
export const VersionInfoSchema: GenMessage<VersionInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 56);

/**
 * @generated from message machine.PlatformInfo
 */
export type PlatformInfo = Message<"machine.PlatformInfo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string mode = 2;
   */
  mode: string;
};

/**
 * Describes the message machine.PlatformInfo.
 * Use `create(PlatformInfoSchema)` to create a new message.
 */
export const PlatformInfoSchema: GenMessage<PlatformInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 57);

/**
 * FeaturesInfo describes individual Talos features that can be switched on or off.
 *
 * @generated from message machine.FeaturesInfo
 */
export type FeaturesInfo = Message<"machine.FeaturesInfo"> & {
  /**
   * RBAC is true if role-based access control is enabled.
   *
   * @generated from field: bool rbac = 1;
   */
  rbac: boolean;
};

/**
 * Describes the message machine.FeaturesInfo.
 * Use `create(FeaturesInfoSchema)` to create a new message.
 */
export const FeaturesInfoSchema: GenMessage<FeaturesInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 58);

/**
 * rpc logs
 * The request message containing the process name.
 *
 * @generated from message machine.LogsRequest
 */
export type LogsRequest = Message<"machine.LogsRequest"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * driver might be default "containerd" or "cri"
   *
   * @generated from field: common.ContainerDriver driver = 3;
   */
  driver: ContainerDriver;

  /**
   * @generated from field: bool follow = 4;
   */
  follow: boolean;

  /**
   * @generated from field: int32 tail_lines = 5;
   */
  tailLines: number;
};

/**
 * Describes the message machine.LogsRequest.
 * Use `create(LogsRequestSchema)` to create a new message.
 */
export const LogsRequestSchema: GenMessage<LogsRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 59);

/**
 * @generated from message machine.ReadRequest
 */
export type ReadRequest = Message<"machine.ReadRequest"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message machine.ReadRequest.
 * Use `create(ReadRequestSchema)` to create a new message.
 */
export const ReadRequestSchema: GenMessage<ReadRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 60);

/**
 * LogsContainer desribes all avalaible registered log containers.
 *
 * @generated from message machine.LogsContainer
 */
export type LogsContainer = Message<"machine.LogsContainer"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[];
};

/**
 * Describes the message machine.LogsContainer.
 * Use `create(LogsContainerSchema)` to create a new message.
 */
export const LogsContainerSchema: GenMessage<LogsContainer> = /*@__PURE__*/
  messageDesc(file_machine_machine, 61);

/**
 * @generated from message machine.LogsContainersResponse
 */
export type LogsContainersResponse = Message<"machine.LogsContainersResponse"> & {
  /**
   * @generated from field: repeated machine.LogsContainer messages = 1;
   */
  messages: LogsContainer[];
};

/**
 * Describes the message machine.LogsContainersResponse.
 * Use `create(LogsContainersResponseSchema)` to create a new message.
 */
export const LogsContainersResponseSchema: GenMessage<LogsContainersResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 62);

/**
 * rpc rollback
 *
 * @generated from message machine.RollbackRequest
 */
export type RollbackRequest = Message<"machine.RollbackRequest"> & {
};

/**
 * Describes the message machine.RollbackRequest.
 * Use `create(RollbackRequestSchema)` to create a new message.
 */
export const RollbackRequestSchema: GenMessage<RollbackRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 63);

/**
 * @generated from message machine.Rollback
 */
export type Rollback = Message<"machine.Rollback"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.Rollback.
 * Use `create(RollbackSchema)` to create a new message.
 */
export const RollbackSchema: GenMessage<Rollback> = /*@__PURE__*/
  messageDesc(file_machine_machine, 64);

/**
 * @generated from message machine.RollbackResponse
 */
export type RollbackResponse = Message<"machine.RollbackResponse"> & {
  /**
   * @generated from field: repeated machine.Rollback messages = 1;
   */
  messages: Rollback[];
};

/**
 * Describes the message machine.RollbackResponse.
 * Use `create(RollbackResponseSchema)` to create a new message.
 */
export const RollbackResponseSchema: GenMessage<RollbackResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 65);

/**
 * @generated from message machine.ContainersRequest
 */
export type ContainersRequest = Message<"machine.ContainersRequest"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * driver might be default "containerd" or "cri"
   *
   * @generated from field: common.ContainerDriver driver = 2;
   */
  driver: ContainerDriver;
};

/**
 * Describes the message machine.ContainersRequest.
 * Use `create(ContainersRequestSchema)` to create a new message.
 */
export const ContainersRequestSchema: GenMessage<ContainersRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 66);

/**
 * The messages message containing the requested containers.
 *
 * @generated from message machine.ContainerInfo
 */
export type ContainerInfo = Message<"machine.ContainerInfo"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: string uid = 10;
   */
  uid: string;

  /**
   * @generated from field: string internal_id = 9;
   */
  internalId: string;

  /**
   * @generated from field: string image = 3;
   */
  image: string;

  /**
   * @generated from field: uint32 pid = 4;
   */
  pid: number;

  /**
   * @generated from field: string status = 5;
   */
  status: string;

  /**
   * @generated from field: string pod_id = 6;
   */
  podId: string;

  /**
   * @generated from field: string name = 7;
   */
  name: string;

  /**
   * @generated from field: string network_namespace = 8;
   */
  networkNamespace: string;
};

/**
 * Describes the message machine.ContainerInfo.
 * Use `create(ContainerInfoSchema)` to create a new message.
 */
export const ContainerInfoSchema: GenMessage<ContainerInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 67);

/**
 * The messages message containing the requested containers.
 *
 * @generated from message machine.Container
 */
export type Container = Message<"machine.Container"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.ContainerInfo containers = 2;
   */
  containers: ContainerInfo[];
};

/**
 * Describes the message machine.Container.
 * Use `create(ContainerSchema)` to create a new message.
 */
export const ContainerSchema: GenMessage<Container> = /*@__PURE__*/
  messageDesc(file_machine_machine, 68);

/**
 * @generated from message machine.ContainersResponse
 */
export type ContainersResponse = Message<"machine.ContainersResponse"> & {
  /**
   * @generated from field: repeated machine.Container messages = 1;
   */
  messages: Container[];
};

/**
 * Describes the message machine.ContainersResponse.
 * Use `create(ContainersResponseSchema)` to create a new message.
 */
export const ContainersResponseSchema: GenMessage<ContainersResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 69);

/**
 * dmesg
 *
 * @generated from message machine.DmesgRequest
 */
export type DmesgRequest = Message<"machine.DmesgRequest"> & {
  /**
   * @generated from field: bool follow = 1;
   */
  follow: boolean;

  /**
   * @generated from field: bool tail = 2;
   */
  tail: boolean;
};

/**
 * Describes the message machine.DmesgRequest.
 * Use `create(DmesgRequestSchema)` to create a new message.
 */
export const DmesgRequestSchema: GenMessage<DmesgRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 70);

/**
 * rpc processes
 *
 * @generated from message machine.ProcessesResponse
 */
export type ProcessesResponse = Message<"machine.ProcessesResponse"> & {
  /**
   * @generated from field: repeated machine.Process messages = 1;
   */
  messages: Process[];
};

/**
 * Describes the message machine.ProcessesResponse.
 * Use `create(ProcessesResponseSchema)` to create a new message.
 */
export const ProcessesResponseSchema: GenMessage<ProcessesResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 71);

/**
 * @generated from message machine.Process
 */
export type Process = Message<"machine.Process"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.ProcessInfo processes = 2;
   */
  processes: ProcessInfo[];
};

/**
 * Describes the message machine.Process.
 * Use `create(ProcessSchema)` to create a new message.
 */
export const ProcessSchema: GenMessage<Process> = /*@__PURE__*/
  messageDesc(file_machine_machine, 72);

/**
 * @generated from message machine.ProcessInfo
 */
export type ProcessInfo = Message<"machine.ProcessInfo"> & {
  /**
   * @generated from field: int32 pid = 1;
   */
  pid: number;

  /**
   * @generated from field: int32 ppid = 2;
   */
  ppid: number;

  /**
   * @generated from field: string state = 3;
   */
  state: string;

  /**
   * @generated from field: int32 threads = 4;
   */
  threads: number;

  /**
   * @generated from field: double cpu_time = 5;
   */
  cpuTime: number;

  /**
   * @generated from field: uint64 virtual_memory = 6;
   */
  virtualMemory: bigint;

  /**
   * @generated from field: uint64 resident_memory = 7;
   */
  residentMemory: bigint;

  /**
   * @generated from field: string command = 8;
   */
  command: string;

  /**
   * @generated from field: string executable = 9;
   */
  executable: string;

  /**
   * @generated from field: string args = 10;
   */
  args: string;

  /**
   * @generated from field: string label = 11;
   */
  label: string;
};

/**
 * Describes the message machine.ProcessInfo.
 * Use `create(ProcessInfoSchema)` to create a new message.
 */
export const ProcessInfoSchema: GenMessage<ProcessInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 73);

/**
 * rpc restart
 * The request message containing the process to restart.
 *
 * @generated from message machine.RestartRequest
 */
export type RestartRequest = Message<"machine.RestartRequest"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * driver might be default "containerd" or "cri"
   *
   * @generated from field: common.ContainerDriver driver = 3;
   */
  driver: ContainerDriver;
};

/**
 * Describes the message machine.RestartRequest.
 * Use `create(RestartRequestSchema)` to create a new message.
 */
export const RestartRequestSchema: GenMessage<RestartRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 74);

/**
 * @generated from message machine.Restart
 */
export type Restart = Message<"machine.Restart"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.Restart.
 * Use `create(RestartSchema)` to create a new message.
 */
export const RestartSchema: GenMessage<Restart> = /*@__PURE__*/
  messageDesc(file_machine_machine, 75);

/**
 * The messages message containing the restart status.
 *
 * @generated from message machine.RestartResponse
 */
export type RestartResponse = Message<"machine.RestartResponse"> & {
  /**
   * @generated from field: repeated machine.Restart messages = 1;
   */
  messages: Restart[];
};

/**
 * Describes the message machine.RestartResponse.
 * Use `create(RestartResponseSchema)` to create a new message.
 */
export const RestartResponseSchema: GenMessage<RestartResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 76);

/**
 * The request message containing the containerd namespace.
 *
 * @generated from message machine.StatsRequest
 */
export type StatsRequest = Message<"machine.StatsRequest"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * driver might be default "containerd" or "cri"
   *
   * @generated from field: common.ContainerDriver driver = 2;
   */
  driver: ContainerDriver;
};

/**
 * Describes the message machine.StatsRequest.
 * Use `create(StatsRequestSchema)` to create a new message.
 */
export const StatsRequestSchema: GenMessage<StatsRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 77);

/**
 * The messages message containing the requested stats.
 *
 * @generated from message machine.Stats
 */
export type Stats = Message<"machine.Stats"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.Stat stats = 2;
   */
  stats: Stat[];
};

/**
 * Describes the message machine.Stats.
 * Use `create(StatsSchema)` to create a new message.
 */
export const StatsSchema: GenMessage<Stats> = /*@__PURE__*/
  messageDesc(file_machine_machine, 78);

/**
 * @generated from message machine.StatsResponse
 */
export type StatsResponse = Message<"machine.StatsResponse"> & {
  /**
   * @generated from field: repeated machine.Stats messages = 1;
   */
  messages: Stats[];
};

/**
 * Describes the message machine.StatsResponse.
 * Use `create(StatsResponseSchema)` to create a new message.
 */
export const StatsResponseSchema: GenMessage<StatsResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 79);

/**
 * The messages message containing the requested stat.
 *
 * @generated from message machine.Stat
 */
export type Stat = Message<"machine.Stat"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: uint64 memory_usage = 4;
   */
  memoryUsage: bigint;

  /**
   * @generated from field: uint64 cpu_usage = 5;
   */
  cpuUsage: bigint;

  /**
   * @generated from field: string pod_id = 6;
   */
  podId: string;

  /**
   * @generated from field: string name = 7;
   */
  name: string;
};

/**
 * Describes the message machine.Stat.
 * Use `create(StatSchema)` to create a new message.
 */
export const StatSchema: GenMessage<Stat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 80);

/**
 * @generated from message machine.Memory
 */
export type Memory = Message<"machine.Memory"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: machine.MemInfo meminfo = 2;
   */
  meminfo?: MemInfo;
};

/**
 * Describes the message machine.Memory.
 * Use `create(MemorySchema)` to create a new message.
 */
export const MemorySchema: GenMessage<Memory> = /*@__PURE__*/
  messageDesc(file_machine_machine, 81);

/**
 * @generated from message machine.MemoryResponse
 */
export type MemoryResponse = Message<"machine.MemoryResponse"> & {
  /**
   * @generated from field: repeated machine.Memory messages = 1;
   */
  messages: Memory[];
};

/**
 * Describes the message machine.MemoryResponse.
 * Use `create(MemoryResponseSchema)` to create a new message.
 */
export const MemoryResponseSchema: GenMessage<MemoryResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 82);

/**
 * @generated from message machine.MemInfo
 */
export type MemInfo = Message<"machine.MemInfo"> & {
  /**
   * @generated from field: uint64 memtotal = 1;
   */
  memtotal: bigint;

  /**
   * @generated from field: uint64 memfree = 2;
   */
  memfree: bigint;

  /**
   * @generated from field: uint64 memavailable = 3;
   */
  memavailable: bigint;

  /**
   * @generated from field: uint64 buffers = 4;
   */
  buffers: bigint;

  /**
   * @generated from field: uint64 cached = 5;
   */
  cached: bigint;

  /**
   * @generated from field: uint64 swapcached = 6;
   */
  swapcached: bigint;

  /**
   * @generated from field: uint64 active = 7;
   */
  active: bigint;

  /**
   * @generated from field: uint64 inactive = 8;
   */
  inactive: bigint;

  /**
   * @generated from field: uint64 activeanon = 9;
   */
  activeanon: bigint;

  /**
   * @generated from field: uint64 inactiveanon = 10;
   */
  inactiveanon: bigint;

  /**
   * @generated from field: uint64 activefile = 11;
   */
  activefile: bigint;

  /**
   * @generated from field: uint64 inactivefile = 12;
   */
  inactivefile: bigint;

  /**
   * @generated from field: uint64 unevictable = 13;
   */
  unevictable: bigint;

  /**
   * @generated from field: uint64 mlocked = 14;
   */
  mlocked: bigint;

  /**
   * @generated from field: uint64 swaptotal = 15;
   */
  swaptotal: bigint;

  /**
   * @generated from field: uint64 swapfree = 16;
   */
  swapfree: bigint;

  /**
   * @generated from field: uint64 dirty = 17;
   */
  dirty: bigint;

  /**
   * @generated from field: uint64 writeback = 18;
   */
  writeback: bigint;

  /**
   * @generated from field: uint64 anonpages = 19;
   */
  anonpages: bigint;

  /**
   * @generated from field: uint64 mapped = 20;
   */
  mapped: bigint;

  /**
   * @generated from field: uint64 shmem = 21;
   */
  shmem: bigint;

  /**
   * @generated from field: uint64 slab = 22;
   */
  slab: bigint;

  /**
   * @generated from field: uint64 sreclaimable = 23;
   */
  sreclaimable: bigint;

  /**
   * @generated from field: uint64 sunreclaim = 24;
   */
  sunreclaim: bigint;

  /**
   * @generated from field: uint64 kernelstack = 25;
   */
  kernelstack: bigint;

  /**
   * @generated from field: uint64 pagetables = 26;
   */
  pagetables: bigint;

  /**
   * @generated from field: uint64 nfsunstable = 27;
   */
  nfsunstable: bigint;

  /**
   * @generated from field: uint64 bounce = 28;
   */
  bounce: bigint;

  /**
   * @generated from field: uint64 writebacktmp = 29;
   */
  writebacktmp: bigint;

  /**
   * @generated from field: uint64 commitlimit = 30;
   */
  commitlimit: bigint;

  /**
   * @generated from field: uint64 committedas = 31;
   */
  committedas: bigint;

  /**
   * @generated from field: uint64 vmalloctotal = 32;
   */
  vmalloctotal: bigint;

  /**
   * @generated from field: uint64 vmallocused = 33;
   */
  vmallocused: bigint;

  /**
   * @generated from field: uint64 vmallocchunk = 34;
   */
  vmallocchunk: bigint;

  /**
   * @generated from field: uint64 hardwarecorrupted = 35;
   */
  hardwarecorrupted: bigint;

  /**
   * @generated from field: uint64 anonhugepages = 36;
   */
  anonhugepages: bigint;

  /**
   * @generated from field: uint64 shmemhugepages = 37;
   */
  shmemhugepages: bigint;

  /**
   * @generated from field: uint64 shmempmdmapped = 38;
   */
  shmempmdmapped: bigint;

  /**
   * @generated from field: uint64 cmatotal = 39;
   */
  cmatotal: bigint;

  /**
   * @generated from field: uint64 cmafree = 40;
   */
  cmafree: bigint;

  /**
   * @generated from field: uint64 hugepagestotal = 41;
   */
  hugepagestotal: bigint;

  /**
   * @generated from field: uint64 hugepagesfree = 42;
   */
  hugepagesfree: bigint;

  /**
   * @generated from field: uint64 hugepagesrsvd = 43;
   */
  hugepagesrsvd: bigint;

  /**
   * @generated from field: uint64 hugepagessurp = 44;
   */
  hugepagessurp: bigint;

  /**
   * @generated from field: uint64 hugepagesize = 45;
   */
  hugepagesize: bigint;

  /**
   * @generated from field: uint64 directmap4k = 46;
   */
  directmap4k: bigint;

  /**
   * @generated from field: uint64 directmap2m = 47;
   */
  directmap2m: bigint;

  /**
   * @generated from field: uint64 directmap1g = 48;
   */
  directmap1g: bigint;
};

/**
 * Describes the message machine.MemInfo.
 * Use `create(MemInfoSchema)` to create a new message.
 */
export const MemInfoSchema: GenMessage<MemInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 83);

/**
 * @generated from message machine.HostnameResponse
 */
export type HostnameResponse = Message<"machine.HostnameResponse"> & {
  /**
   * @generated from field: repeated machine.Hostname messages = 1;
   */
  messages: Hostname[];
};

/**
 * Describes the message machine.HostnameResponse.
 * Use `create(HostnameResponseSchema)` to create a new message.
 */
export const HostnameResponseSchema: GenMessage<HostnameResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 84);

/**
 * @generated from message machine.Hostname
 */
export type Hostname = Message<"machine.Hostname"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string hostname = 2;
   */
  hostname: string;
};

/**
 * Describes the message machine.Hostname.
 * Use `create(HostnameSchema)` to create a new message.
 */
export const HostnameSchema: GenMessage<Hostname> = /*@__PURE__*/
  messageDesc(file_machine_machine, 85);

/**
 * @generated from message machine.LoadAvgResponse
 */
export type LoadAvgResponse = Message<"machine.LoadAvgResponse"> & {
  /**
   * @generated from field: repeated machine.LoadAvg messages = 1;
   */
  messages: LoadAvg[];
};

/**
 * Describes the message machine.LoadAvgResponse.
 * Use `create(LoadAvgResponseSchema)` to create a new message.
 */
export const LoadAvgResponseSchema: GenMessage<LoadAvgResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 86);

/**
 * @generated from message machine.LoadAvg
 */
export type LoadAvg = Message<"machine.LoadAvg"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: double load1 = 2;
   */
  load1: number;

  /**
   * @generated from field: double load5 = 3;
   */
  load5: number;

  /**
   * @generated from field: double load15 = 4;
   */
  load15: number;
};

/**
 * Describes the message machine.LoadAvg.
 * Use `create(LoadAvgSchema)` to create a new message.
 */
export const LoadAvgSchema: GenMessage<LoadAvg> = /*@__PURE__*/
  messageDesc(file_machine_machine, 87);

/**
 * @generated from message machine.SystemStatResponse
 */
export type SystemStatResponse = Message<"machine.SystemStatResponse"> & {
  /**
   * @generated from field: repeated machine.SystemStat messages = 1;
   */
  messages: SystemStat[];
};

/**
 * Describes the message machine.SystemStatResponse.
 * Use `create(SystemStatResponseSchema)` to create a new message.
 */
export const SystemStatResponseSchema: GenMessage<SystemStatResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 88);

/**
 * @generated from message machine.SystemStat
 */
export type SystemStat = Message<"machine.SystemStat"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: uint64 boot_time = 2;
   */
  bootTime: bigint;

  /**
   * @generated from field: machine.CPUStat cpu_total = 3;
   */
  cpuTotal?: CPUStat;

  /**
   * @generated from field: repeated machine.CPUStat cpu = 4;
   */
  cpu: CPUStat[];

  /**
   * @generated from field: uint64 irq_total = 5;
   */
  irqTotal: bigint;

  /**
   * @generated from field: repeated uint64 irq = 6;
   */
  irq: bigint[];

  /**
   * @generated from field: uint64 context_switches = 7;
   */
  contextSwitches: bigint;

  /**
   * @generated from field: uint64 process_created = 8;
   */
  processCreated: bigint;

  /**
   * @generated from field: uint64 process_running = 9;
   */
  processRunning: bigint;

  /**
   * @generated from field: uint64 process_blocked = 10;
   */
  processBlocked: bigint;

  /**
   * @generated from field: uint64 soft_irq_total = 11;
   */
  softIrqTotal: bigint;

  /**
   * @generated from field: machine.SoftIRQStat soft_irq = 12;
   */
  softIrq?: SoftIRQStat;
};

/**
 * Describes the message machine.SystemStat.
 * Use `create(SystemStatSchema)` to create a new message.
 */
export const SystemStatSchema: GenMessage<SystemStat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 89);

/**
 * @generated from message machine.CPUStat
 */
export type CPUStat = Message<"machine.CPUStat"> & {
  /**
   * @generated from field: double user = 1;
   */
  user: number;

  /**
   * @generated from field: double nice = 2;
   */
  nice: number;

  /**
   * @generated from field: double system = 3;
   */
  system: number;

  /**
   * @generated from field: double idle = 4;
   */
  idle: number;

  /**
   * @generated from field: double iowait = 5;
   */
  iowait: number;

  /**
   * @generated from field: double irq = 6;
   */
  irq: number;

  /**
   * @generated from field: double soft_irq = 7;
   */
  softIrq: number;

  /**
   * @generated from field: double steal = 8;
   */
  steal: number;

  /**
   * @generated from field: double guest = 9;
   */
  guest: number;

  /**
   * @generated from field: double guest_nice = 10;
   */
  guestNice: number;
};

/**
 * Describes the message machine.CPUStat.
 * Use `create(CPUStatSchema)` to create a new message.
 */
export const CPUStatSchema: GenMessage<CPUStat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 90);

/**
 * @generated from message machine.SoftIRQStat
 */
export type SoftIRQStat = Message<"machine.SoftIRQStat"> & {
  /**
   * @generated from field: uint64 hi = 1;
   */
  hi: bigint;

  /**
   * @generated from field: uint64 timer = 2;
   */
  timer: bigint;

  /**
   * @generated from field: uint64 net_tx = 3;
   */
  netTx: bigint;

  /**
   * @generated from field: uint64 net_rx = 4;
   */
  netRx: bigint;

  /**
   * @generated from field: uint64 block = 5;
   */
  block: bigint;

  /**
   * @generated from field: uint64 block_io_poll = 6;
   */
  blockIoPoll: bigint;

  /**
   * @generated from field: uint64 tasklet = 7;
   */
  tasklet: bigint;

  /**
   * @generated from field: uint64 sched = 8;
   */
  sched: bigint;

  /**
   * @generated from field: uint64 hrtimer = 9;
   */
  hrtimer: bigint;

  /**
   * @generated from field: uint64 rcu = 10;
   */
  rcu: bigint;
};

/**
 * Describes the message machine.SoftIRQStat.
 * Use `create(SoftIRQStatSchema)` to create a new message.
 */
export const SoftIRQStatSchema: GenMessage<SoftIRQStat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 91);

/**
 * @generated from message machine.CPUFreqStatsResponse
 */
export type CPUFreqStatsResponse = Message<"machine.CPUFreqStatsResponse"> & {
  /**
   * @generated from field: repeated machine.CPUsFreqStats messages = 1;
   */
  messages: CPUsFreqStats[];
};

/**
 * Describes the message machine.CPUFreqStatsResponse.
 * Use `create(CPUFreqStatsResponseSchema)` to create a new message.
 */
export const CPUFreqStatsResponseSchema: GenMessage<CPUFreqStatsResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 92);

/**
 * @generated from message machine.CPUsFreqStats
 */
export type CPUsFreqStats = Message<"machine.CPUsFreqStats"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.CPUFreqStats cpu_freq_stats = 2;
   */
  cpuFreqStats: CPUFreqStats[];
};

/**
 * Describes the message machine.CPUsFreqStats.
 * Use `create(CPUsFreqStatsSchema)` to create a new message.
 */
export const CPUsFreqStatsSchema: GenMessage<CPUsFreqStats> = /*@__PURE__*/
  messageDesc(file_machine_machine, 93);

/**
 * @generated from message machine.CPUFreqStats
 */
export type CPUFreqStats = Message<"machine.CPUFreqStats"> & {
  /**
   * @generated from field: uint64 current_frequency = 1;
   */
  currentFrequency: bigint;

  /**
   * @generated from field: uint64 minimum_frequency = 2;
   */
  minimumFrequency: bigint;

  /**
   * @generated from field: uint64 maximum_frequency = 3;
   */
  maximumFrequency: bigint;

  /**
   * @generated from field: string governor = 4;
   */
  governor: string;
};

/**
 * Describes the message machine.CPUFreqStats.
 * Use `create(CPUFreqStatsSchema)` to create a new message.
 */
export const CPUFreqStatsSchema: GenMessage<CPUFreqStats> = /*@__PURE__*/
  messageDesc(file_machine_machine, 94);

/**
 * @generated from message machine.CPUInfoResponse
 */
export type CPUInfoResponse = Message<"machine.CPUInfoResponse"> & {
  /**
   * @generated from field: repeated machine.CPUsInfo messages = 1;
   */
  messages: CPUsInfo[];
};

/**
 * Describes the message machine.CPUInfoResponse.
 * Use `create(CPUInfoResponseSchema)` to create a new message.
 */
export const CPUInfoResponseSchema: GenMessage<CPUInfoResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 95);

/**
 * @generated from message machine.CPUsInfo
 */
export type CPUsInfo = Message<"machine.CPUsInfo"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.CPUInfo cpu_info = 2;
   */
  cpuInfo: CPUInfo[];
};

/**
 * Describes the message machine.CPUsInfo.
 * Use `create(CPUsInfoSchema)` to create a new message.
 */
export const CPUsInfoSchema: GenMessage<CPUsInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 96);

/**
 * @generated from message machine.CPUInfo
 */
export type CPUInfo = Message<"machine.CPUInfo"> & {
  /**
   * @generated from field: uint32 processor = 1;
   */
  processor: number;

  /**
   * @generated from field: string vendor_id = 2;
   */
  vendorId: string;

  /**
   * @generated from field: string cpu_family = 3;
   */
  cpuFamily: string;

  /**
   * @generated from field: string model = 4;
   */
  model: string;

  /**
   * @generated from field: string model_name = 5;
   */
  modelName: string;

  /**
   * @generated from field: string stepping = 6;
   */
  stepping: string;

  /**
   * @generated from field: string microcode = 7;
   */
  microcode: string;

  /**
   * @generated from field: double cpu_mhz = 8;
   */
  cpuMhz: number;

  /**
   * @generated from field: string cache_size = 9;
   */
  cacheSize: string;

  /**
   * @generated from field: string physical_id = 10;
   */
  physicalId: string;

  /**
   * @generated from field: uint32 siblings = 11;
   */
  siblings: number;

  /**
   * @generated from field: string core_id = 12;
   */
  coreId: string;

  /**
   * @generated from field: uint32 cpu_cores = 13;
   */
  cpuCores: number;

  /**
   * @generated from field: string apic_id = 14;
   */
  apicId: string;

  /**
   * @generated from field: string initial_apic_id = 15;
   */
  initialApicId: string;

  /**
   * @generated from field: string fpu = 16;
   */
  fpu: string;

  /**
   * @generated from field: string fpu_exception = 17;
   */
  fpuException: string;

  /**
   * @generated from field: uint32 cpu_id_level = 18;
   */
  cpuIdLevel: number;

  /**
   * @generated from field: string wp = 19;
   */
  wp: string;

  /**
   * @generated from field: repeated string flags = 20;
   */
  flags: string[];

  /**
   * @generated from field: repeated string bugs = 21;
   */
  bugs: string[];

  /**
   * @generated from field: double bogo_mips = 22;
   */
  bogoMips: number;

  /**
   * @generated from field: uint32 cl_flush_size = 23;
   */
  clFlushSize: number;

  /**
   * @generated from field: uint32 cache_alignment = 24;
   */
  cacheAlignment: number;

  /**
   * @generated from field: string address_sizes = 25;
   */
  addressSizes: string;

  /**
   * @generated from field: string power_management = 26;
   */
  powerManagement: string;
};

/**
 * Describes the message machine.CPUInfo.
 * Use `create(CPUInfoSchema)` to create a new message.
 */
export const CPUInfoSchema: GenMessage<CPUInfo> = /*@__PURE__*/
  messageDesc(file_machine_machine, 97);

/**
 * @generated from message machine.NetworkDeviceStatsResponse
 */
export type NetworkDeviceStatsResponse = Message<"machine.NetworkDeviceStatsResponse"> & {
  /**
   * @generated from field: repeated machine.NetworkDeviceStats messages = 1;
   */
  messages: NetworkDeviceStats[];
};

/**
 * Describes the message machine.NetworkDeviceStatsResponse.
 * Use `create(NetworkDeviceStatsResponseSchema)` to create a new message.
 */
export const NetworkDeviceStatsResponseSchema: GenMessage<NetworkDeviceStatsResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 98);

/**
 * @generated from message machine.NetworkDeviceStats
 */
export type NetworkDeviceStats = Message<"machine.NetworkDeviceStats"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: machine.NetDev total = 2;
   */
  total?: NetDev;

  /**
   * @generated from field: repeated machine.NetDev devices = 3;
   */
  devices: NetDev[];
};

/**
 * Describes the message machine.NetworkDeviceStats.
 * Use `create(NetworkDeviceStatsSchema)` to create a new message.
 */
export const NetworkDeviceStatsSchema: GenMessage<NetworkDeviceStats> = /*@__PURE__*/
  messageDesc(file_machine_machine, 99);

/**
 * @generated from message machine.NetDev
 */
export type NetDev = Message<"machine.NetDev"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint64 rx_bytes = 2;
   */
  rxBytes: bigint;

  /**
   * @generated from field: uint64 rx_packets = 3;
   */
  rxPackets: bigint;

  /**
   * @generated from field: uint64 rx_errors = 4;
   */
  rxErrors: bigint;

  /**
   * @generated from field: uint64 rx_dropped = 5;
   */
  rxDropped: bigint;

  /**
   * @generated from field: uint64 rx_fifo = 6;
   */
  rxFifo: bigint;

  /**
   * @generated from field: uint64 rx_frame = 7;
   */
  rxFrame: bigint;

  /**
   * @generated from field: uint64 rx_compressed = 8;
   */
  rxCompressed: bigint;

  /**
   * @generated from field: uint64 rx_multicast = 9;
   */
  rxMulticast: bigint;

  /**
   * @generated from field: uint64 tx_bytes = 10;
   */
  txBytes: bigint;

  /**
   * @generated from field: uint64 tx_packets = 11;
   */
  txPackets: bigint;

  /**
   * @generated from field: uint64 tx_errors = 12;
   */
  txErrors: bigint;

  /**
   * @generated from field: uint64 tx_dropped = 13;
   */
  txDropped: bigint;

  /**
   * @generated from field: uint64 tx_fifo = 14;
   */
  txFifo: bigint;

  /**
   * @generated from field: uint64 tx_collisions = 15;
   */
  txCollisions: bigint;

  /**
   * @generated from field: uint64 tx_carrier = 16;
   */
  txCarrier: bigint;

  /**
   * @generated from field: uint64 tx_compressed = 17;
   */
  txCompressed: bigint;
};

/**
 * Describes the message machine.NetDev.
 * Use `create(NetDevSchema)` to create a new message.
 */
export const NetDevSchema: GenMessage<NetDev> = /*@__PURE__*/
  messageDesc(file_machine_machine, 100);

/**
 * @generated from message machine.DiskStatsResponse
 */
export type DiskStatsResponse = Message<"machine.DiskStatsResponse"> & {
  /**
   * @generated from field: repeated machine.DiskStats messages = 1;
   */
  messages: DiskStats[];
};

/**
 * Describes the message machine.DiskStatsResponse.
 * Use `create(DiskStatsResponseSchema)` to create a new message.
 */
export const DiskStatsResponseSchema: GenMessage<DiskStatsResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 101);

/**
 * @generated from message machine.DiskStats
 */
export type DiskStats = Message<"machine.DiskStats"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: machine.DiskStat total = 2;
   */
  total?: DiskStat;

  /**
   * @generated from field: repeated machine.DiskStat devices = 3;
   */
  devices: DiskStat[];
};

/**
 * Describes the message machine.DiskStats.
 * Use `create(DiskStatsSchema)` to create a new message.
 */
export const DiskStatsSchema: GenMessage<DiskStats> = /*@__PURE__*/
  messageDesc(file_machine_machine, 102);

/**
 * @generated from message machine.DiskStat
 */
export type DiskStat = Message<"machine.DiskStat"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint64 read_completed = 2;
   */
  readCompleted: bigint;

  /**
   * @generated from field: uint64 read_merged = 3;
   */
  readMerged: bigint;

  /**
   * @generated from field: uint64 read_sectors = 4;
   */
  readSectors: bigint;

  /**
   * @generated from field: uint64 read_time_ms = 5;
   */
  readTimeMs: bigint;

  /**
   * @generated from field: uint64 write_completed = 6;
   */
  writeCompleted: bigint;

  /**
   * @generated from field: uint64 write_merged = 7;
   */
  writeMerged: bigint;

  /**
   * @generated from field: uint64 write_sectors = 8;
   */
  writeSectors: bigint;

  /**
   * @generated from field: uint64 write_time_ms = 9;
   */
  writeTimeMs: bigint;

  /**
   * @generated from field: uint64 io_in_progress = 10;
   */
  ioInProgress: bigint;

  /**
   * @generated from field: uint64 io_time_ms = 11;
   */
  ioTimeMs: bigint;

  /**
   * @generated from field: uint64 io_time_weighted_ms = 12;
   */
  ioTimeWeightedMs: bigint;

  /**
   * @generated from field: uint64 discard_completed = 13;
   */
  discardCompleted: bigint;

  /**
   * @generated from field: uint64 discard_merged = 14;
   */
  discardMerged: bigint;

  /**
   * @generated from field: uint64 discard_sectors = 15;
   */
  discardSectors: bigint;

  /**
   * @generated from field: uint64 discard_time_ms = 16;
   */
  discardTimeMs: bigint;
};

/**
 * Describes the message machine.DiskStat.
 * Use `create(DiskStatSchema)` to create a new message.
 */
export const DiskStatSchema: GenMessage<DiskStat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 103);

/**
 * @generated from message machine.EtcdLeaveClusterRequest
 */
export type EtcdLeaveClusterRequest = Message<"machine.EtcdLeaveClusterRequest"> & {
};

/**
 * Describes the message machine.EtcdLeaveClusterRequest.
 * Use `create(EtcdLeaveClusterRequestSchema)` to create a new message.
 */
export const EtcdLeaveClusterRequestSchema: GenMessage<EtcdLeaveClusterRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 104);

/**
 * @generated from message machine.EtcdLeaveCluster
 */
export type EtcdLeaveCluster = Message<"machine.EtcdLeaveCluster"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.EtcdLeaveCluster.
 * Use `create(EtcdLeaveClusterSchema)` to create a new message.
 */
export const EtcdLeaveClusterSchema: GenMessage<EtcdLeaveCluster> = /*@__PURE__*/
  messageDesc(file_machine_machine, 105);

/**
 * @generated from message machine.EtcdLeaveClusterResponse
 */
export type EtcdLeaveClusterResponse = Message<"machine.EtcdLeaveClusterResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdLeaveCluster messages = 1;
   */
  messages: EtcdLeaveCluster[];
};

/**
 * Describes the message machine.EtcdLeaveClusterResponse.
 * Use `create(EtcdLeaveClusterResponseSchema)` to create a new message.
 */
export const EtcdLeaveClusterResponseSchema: GenMessage<EtcdLeaveClusterResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 106);

/**
 * @generated from message machine.EtcdRemoveMemberRequest
 */
export type EtcdRemoveMemberRequest = Message<"machine.EtcdRemoveMemberRequest"> & {
  /**
   * @generated from field: string member = 1;
   */
  member: string;
};

/**
 * Describes the message machine.EtcdRemoveMemberRequest.
 * Use `create(EtcdRemoveMemberRequestSchema)` to create a new message.
 */
export const EtcdRemoveMemberRequestSchema: GenMessage<EtcdRemoveMemberRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 107);

/**
 * @generated from message machine.EtcdRemoveMember
 */
export type EtcdRemoveMember = Message<"machine.EtcdRemoveMember"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.EtcdRemoveMember.
 * Use `create(EtcdRemoveMemberSchema)` to create a new message.
 */
export const EtcdRemoveMemberSchema: GenMessage<EtcdRemoveMember> = /*@__PURE__*/
  messageDesc(file_machine_machine, 108);

/**
 * @generated from message machine.EtcdRemoveMemberResponse
 */
export type EtcdRemoveMemberResponse = Message<"machine.EtcdRemoveMemberResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdRemoveMember messages = 1;
   */
  messages: EtcdRemoveMember[];
};

/**
 * Describes the message machine.EtcdRemoveMemberResponse.
 * Use `create(EtcdRemoveMemberResponseSchema)` to create a new message.
 */
export const EtcdRemoveMemberResponseSchema: GenMessage<EtcdRemoveMemberResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 109);

/**
 * @generated from message machine.EtcdRemoveMemberByIDRequest
 */
export type EtcdRemoveMemberByIDRequest = Message<"machine.EtcdRemoveMemberByIDRequest"> & {
  /**
   * @generated from field: uint64 member_id = 1;
   */
  memberId: bigint;
};

/**
 * Describes the message machine.EtcdRemoveMemberByIDRequest.
 * Use `create(EtcdRemoveMemberByIDRequestSchema)` to create a new message.
 */
export const EtcdRemoveMemberByIDRequestSchema: GenMessage<EtcdRemoveMemberByIDRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 110);

/**
 * @generated from message machine.EtcdRemoveMemberByID
 */
export type EtcdRemoveMemberByID = Message<"machine.EtcdRemoveMemberByID"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.EtcdRemoveMemberByID.
 * Use `create(EtcdRemoveMemberByIDSchema)` to create a new message.
 */
export const EtcdRemoveMemberByIDSchema: GenMessage<EtcdRemoveMemberByID> = /*@__PURE__*/
  messageDesc(file_machine_machine, 111);

/**
 * @generated from message machine.EtcdRemoveMemberByIDResponse
 */
export type EtcdRemoveMemberByIDResponse = Message<"machine.EtcdRemoveMemberByIDResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdRemoveMemberByID messages = 1;
   */
  messages: EtcdRemoveMemberByID[];
};

/**
 * Describes the message machine.EtcdRemoveMemberByIDResponse.
 * Use `create(EtcdRemoveMemberByIDResponseSchema)` to create a new message.
 */
export const EtcdRemoveMemberByIDResponseSchema: GenMessage<EtcdRemoveMemberByIDResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 112);

/**
 * @generated from message machine.EtcdForfeitLeadershipRequest
 */
export type EtcdForfeitLeadershipRequest = Message<"machine.EtcdForfeitLeadershipRequest"> & {
};

/**
 * Describes the message machine.EtcdForfeitLeadershipRequest.
 * Use `create(EtcdForfeitLeadershipRequestSchema)` to create a new message.
 */
export const EtcdForfeitLeadershipRequestSchema: GenMessage<EtcdForfeitLeadershipRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 113);

/**
 * @generated from message machine.EtcdForfeitLeadership
 */
export type EtcdForfeitLeadership = Message<"machine.EtcdForfeitLeadership"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string member = 2;
   */
  member: string;
};

/**
 * Describes the message machine.EtcdForfeitLeadership.
 * Use `create(EtcdForfeitLeadershipSchema)` to create a new message.
 */
export const EtcdForfeitLeadershipSchema: GenMessage<EtcdForfeitLeadership> = /*@__PURE__*/
  messageDesc(file_machine_machine, 114);

/**
 * @generated from message machine.EtcdForfeitLeadershipResponse
 */
export type EtcdForfeitLeadershipResponse = Message<"machine.EtcdForfeitLeadershipResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdForfeitLeadership messages = 1;
   */
  messages: EtcdForfeitLeadership[];
};

/**
 * Describes the message machine.EtcdForfeitLeadershipResponse.
 * Use `create(EtcdForfeitLeadershipResponseSchema)` to create a new message.
 */
export const EtcdForfeitLeadershipResponseSchema: GenMessage<EtcdForfeitLeadershipResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 115);

/**
 * @generated from message machine.EtcdMemberListRequest
 */
export type EtcdMemberListRequest = Message<"machine.EtcdMemberListRequest"> & {
  /**
   * @generated from field: bool query_local = 1;
   */
  queryLocal: boolean;
};

/**
 * Describes the message machine.EtcdMemberListRequest.
 * Use `create(EtcdMemberListRequestSchema)` to create a new message.
 */
export const EtcdMemberListRequestSchema: GenMessage<EtcdMemberListRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 116);

/**
 * EtcdMember describes a single etcd member.
 *
 * @generated from message machine.EtcdMember
 */
export type EtcdMember = Message<"machine.EtcdMember"> & {
  /**
   * member ID.
   *
   * @generated from field: uint64 id = 2;
   */
  id: bigint;

  /**
   * human-readable name of the member.
   *
   * @generated from field: string hostname = 3;
   */
  hostname: string;

  /**
   * the list of URLs the member exposes to clients for communication.
   *
   * @generated from field: repeated string peer_urls = 4;
   */
  peerUrls: string[];

  /**
   * the list of URLs the member exposes to the cluster for communication.
   *
   * @generated from field: repeated string client_urls = 5;
   */
  clientUrls: string[];

  /**
   * learner flag
   *
   * @generated from field: bool is_learner = 6;
   */
  isLearner: boolean;
};

/**
 * Describes the message machine.EtcdMember.
 * Use `create(EtcdMemberSchema)` to create a new message.
 */
export const EtcdMemberSchema: GenMessage<EtcdMember> = /*@__PURE__*/
  messageDesc(file_machine_machine, 117);

/**
 * EtcdMembers contains the list of members registered on the host.
 *
 * @generated from message machine.EtcdMembers
 */
export type EtcdMembers = Message<"machine.EtcdMembers"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * list of member hostnames.
   *
   * @generated from field: repeated string legacy_members = 2;
   */
  legacyMembers: string[];

  /**
   * the list of etcd members registered on the node.
   *
   * @generated from field: repeated machine.EtcdMember members = 3;
   */
  members: EtcdMember[];
};

/**
 * Describes the message machine.EtcdMembers.
 * Use `create(EtcdMembersSchema)` to create a new message.
 */
export const EtcdMembersSchema: GenMessage<EtcdMembers> = /*@__PURE__*/
  messageDesc(file_machine_machine, 118);

/**
 * @generated from message machine.EtcdMemberListResponse
 */
export type EtcdMemberListResponse = Message<"machine.EtcdMemberListResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdMembers messages = 1;
   */
  messages: EtcdMembers[];
};

/**
 * Describes the message machine.EtcdMemberListResponse.
 * Use `create(EtcdMemberListResponseSchema)` to create a new message.
 */
export const EtcdMemberListResponseSchema: GenMessage<EtcdMemberListResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 119);

/**
 * @generated from message machine.EtcdSnapshotRequest
 */
export type EtcdSnapshotRequest = Message<"machine.EtcdSnapshotRequest"> & {
};

/**
 * Describes the message machine.EtcdSnapshotRequest.
 * Use `create(EtcdSnapshotRequestSchema)` to create a new message.
 */
export const EtcdSnapshotRequestSchema: GenMessage<EtcdSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 120);

/**
 * @generated from message machine.EtcdRecover
 */
export type EtcdRecover = Message<"machine.EtcdRecover"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.EtcdRecover.
 * Use `create(EtcdRecoverSchema)` to create a new message.
 */
export const EtcdRecoverSchema: GenMessage<EtcdRecover> = /*@__PURE__*/
  messageDesc(file_machine_machine, 121);

/**
 * @generated from message machine.EtcdRecoverResponse
 */
export type EtcdRecoverResponse = Message<"machine.EtcdRecoverResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdRecover messages = 1;
   */
  messages: EtcdRecover[];
};

/**
 * Describes the message machine.EtcdRecoverResponse.
 * Use `create(EtcdRecoverResponseSchema)` to create a new message.
 */
export const EtcdRecoverResponseSchema: GenMessage<EtcdRecoverResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 122);

/**
 * @generated from message machine.EtcdAlarmListResponse
 */
export type EtcdAlarmListResponse = Message<"machine.EtcdAlarmListResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdAlarm messages = 1;
   */
  messages: EtcdAlarm[];
};

/**
 * Describes the message machine.EtcdAlarmListResponse.
 * Use `create(EtcdAlarmListResponseSchema)` to create a new message.
 */
export const EtcdAlarmListResponseSchema: GenMessage<EtcdAlarmListResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 123);

/**
 * @generated from message machine.EtcdAlarm
 */
export type EtcdAlarm = Message<"machine.EtcdAlarm"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.EtcdMemberAlarm member_alarms = 2;
   */
  memberAlarms: EtcdMemberAlarm[];
};

/**
 * Describes the message machine.EtcdAlarm.
 * Use `create(EtcdAlarmSchema)` to create a new message.
 */
export const EtcdAlarmSchema: GenMessage<EtcdAlarm> = /*@__PURE__*/
  messageDesc(file_machine_machine, 124);

/**
 * @generated from message machine.EtcdMemberAlarm
 */
export type EtcdMemberAlarm = Message<"machine.EtcdMemberAlarm"> & {
  /**
   * @generated from field: uint64 member_id = 1;
   */
  memberId: bigint;

  /**
   * @generated from field: machine.EtcdMemberAlarm.AlarmType alarm = 2;
   */
  alarm: EtcdMemberAlarm_AlarmType;
};

/**
 * Describes the message machine.EtcdMemberAlarm.
 * Use `create(EtcdMemberAlarmSchema)` to create a new message.
 */
export const EtcdMemberAlarmSchema: GenMessage<EtcdMemberAlarm> = /*@__PURE__*/
  messageDesc(file_machine_machine, 125);

/**
 * @generated from enum machine.EtcdMemberAlarm.AlarmType
 */
export enum EtcdMemberAlarm_AlarmType {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: NOSPACE = 1;
   */
  NOSPACE = 1,

  /**
   * @generated from enum value: CORRUPT = 2;
   */
  CORRUPT = 2,
}

/**
 * Describes the enum machine.EtcdMemberAlarm.AlarmType.
 */
export const EtcdMemberAlarm_AlarmTypeSchema: GenEnum<EtcdMemberAlarm_AlarmType> = /*@__PURE__*/
  enumDesc(file_machine_machine, 125, 0);

/**
 * @generated from message machine.EtcdAlarmDisarmResponse
 */
export type EtcdAlarmDisarmResponse = Message<"machine.EtcdAlarmDisarmResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdAlarmDisarm messages = 1;
   */
  messages: EtcdAlarmDisarm[];
};

/**
 * Describes the message machine.EtcdAlarmDisarmResponse.
 * Use `create(EtcdAlarmDisarmResponseSchema)` to create a new message.
 */
export const EtcdAlarmDisarmResponseSchema: GenMessage<EtcdAlarmDisarmResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 126);

/**
 * @generated from message machine.EtcdAlarmDisarm
 */
export type EtcdAlarmDisarm = Message<"machine.EtcdAlarmDisarm"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.EtcdMemberAlarm member_alarms = 2;
   */
  memberAlarms: EtcdMemberAlarm[];
};

/**
 * Describes the message machine.EtcdAlarmDisarm.
 * Use `create(EtcdAlarmDisarmSchema)` to create a new message.
 */
export const EtcdAlarmDisarmSchema: GenMessage<EtcdAlarmDisarm> = /*@__PURE__*/
  messageDesc(file_machine_machine, 127);

/**
 * @generated from message machine.EtcdDefragmentResponse
 */
export type EtcdDefragmentResponse = Message<"machine.EtcdDefragmentResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdDefragment messages = 1;
   */
  messages: EtcdDefragment[];
};

/**
 * Describes the message machine.EtcdDefragmentResponse.
 * Use `create(EtcdDefragmentResponseSchema)` to create a new message.
 */
export const EtcdDefragmentResponseSchema: GenMessage<EtcdDefragmentResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 128);

/**
 * @generated from message machine.EtcdDefragment
 */
export type EtcdDefragment = Message<"machine.EtcdDefragment"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.EtcdDefragment.
 * Use `create(EtcdDefragmentSchema)` to create a new message.
 */
export const EtcdDefragmentSchema: GenMessage<EtcdDefragment> = /*@__PURE__*/
  messageDesc(file_machine_machine, 129);

/**
 * @generated from message machine.EtcdStatusResponse
 */
export type EtcdStatusResponse = Message<"machine.EtcdStatusResponse"> & {
  /**
   * @generated from field: repeated machine.EtcdStatus messages = 1;
   */
  messages: EtcdStatus[];
};

/**
 * Describes the message machine.EtcdStatusResponse.
 * Use `create(EtcdStatusResponseSchema)` to create a new message.
 */
export const EtcdStatusResponseSchema: GenMessage<EtcdStatusResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 130);

/**
 * @generated from message machine.EtcdStatus
 */
export type EtcdStatus = Message<"machine.EtcdStatus"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: machine.EtcdMemberStatus member_status = 2;
   */
  memberStatus?: EtcdMemberStatus;
};

/**
 * Describes the message machine.EtcdStatus.
 * Use `create(EtcdStatusSchema)` to create a new message.
 */
export const EtcdStatusSchema: GenMessage<EtcdStatus> = /*@__PURE__*/
  messageDesc(file_machine_machine, 131);

/**
 * @generated from message machine.EtcdMemberStatus
 */
export type EtcdMemberStatus = Message<"machine.EtcdMemberStatus"> & {
  /**
   * @generated from field: uint64 member_id = 10;
   */
  memberId: bigint;

  /**
   * @generated from field: string protocol_version = 1;
   */
  protocolVersion: string;

  /**
   * @generated from field: int64 db_size = 2;
   */
  dbSize: bigint;

  /**
   * @generated from field: int64 db_size_in_use = 3;
   */
  dbSizeInUse: bigint;

  /**
   * @generated from field: uint64 leader = 4;
   */
  leader: bigint;

  /**
   * @generated from field: uint64 raft_index = 5;
   */
  raftIndex: bigint;

  /**
   * @generated from field: uint64 raft_term = 6;
   */
  raftTerm: bigint;

  /**
   * @generated from field: uint64 raft_applied_index = 7;
   */
  raftAppliedIndex: bigint;

  /**
   * @generated from field: repeated string errors = 8;
   */
  errors: string[];

  /**
   * @generated from field: bool is_learner = 9;
   */
  isLearner: boolean;
};

/**
 * Describes the message machine.EtcdMemberStatus.
 * Use `create(EtcdMemberStatusSchema)` to create a new message.
 */
export const EtcdMemberStatusSchema: GenMessage<EtcdMemberStatus> = /*@__PURE__*/
  messageDesc(file_machine_machine, 132);

/**
 * @generated from message machine.RouteConfig
 */
export type RouteConfig = Message<"machine.RouteConfig"> & {
  /**
   * @generated from field: string network = 1;
   */
  network: string;

  /**
   * @generated from field: string gateway = 2;
   */
  gateway: string;

  /**
   * @generated from field: uint32 metric = 3;
   */
  metric: number;
};

/**
 * Describes the message machine.RouteConfig.
 * Use `create(RouteConfigSchema)` to create a new message.
 */
export const RouteConfigSchema: GenMessage<RouteConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 133);

/**
 * @generated from message machine.DHCPOptionsConfig
 */
export type DHCPOptionsConfig = Message<"machine.DHCPOptionsConfig"> & {
  /**
   * @generated from field: uint32 route_metric = 1;
   */
  routeMetric: number;
};

/**
 * Describes the message machine.DHCPOptionsConfig.
 * Use `create(DHCPOptionsConfigSchema)` to create a new message.
 */
export const DHCPOptionsConfigSchema: GenMessage<DHCPOptionsConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 134);

/**
 * @generated from message machine.NetworkDeviceConfig
 */
export type NetworkDeviceConfig = Message<"machine.NetworkDeviceConfig"> & {
  /**
   * @generated from field: string interface = 1;
   */
  interface: string;

  /**
   * @generated from field: string cidr = 2;
   */
  cidr: string;

  /**
   * @generated from field: int32 mtu = 3;
   */
  mtu: number;

  /**
   * @generated from field: bool dhcp = 4;
   */
  dhcp: boolean;

  /**
   * @generated from field: bool ignore = 5;
   */
  ignore: boolean;

  /**
   * @generated from field: machine.DHCPOptionsConfig dhcp_options = 6;
   */
  dhcpOptions?: DHCPOptionsConfig;

  /**
   * @generated from field: repeated machine.RouteConfig routes = 7;
   */
  routes: RouteConfig[];
};

/**
 * Describes the message machine.NetworkDeviceConfig.
 * Use `create(NetworkDeviceConfigSchema)` to create a new message.
 */
export const NetworkDeviceConfigSchema: GenMessage<NetworkDeviceConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 135);

/**
 * @generated from message machine.NetworkConfig
 */
export type NetworkConfig = Message<"machine.NetworkConfig"> & {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  /**
   * @generated from field: repeated machine.NetworkDeviceConfig interfaces = 2;
   */
  interfaces: NetworkDeviceConfig[];
};

/**
 * Describes the message machine.NetworkConfig.
 * Use `create(NetworkConfigSchema)` to create a new message.
 */
export const NetworkConfigSchema: GenMessage<NetworkConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 136);

/**
 * @generated from message machine.InstallConfig
 */
export type InstallConfig = Message<"machine.InstallConfig"> & {
  /**
   * @generated from field: string install_disk = 1;
   */
  installDisk: string;

  /**
   * @generated from field: string install_image = 2;
   */
  installImage: string;
};

/**
 * Describes the message machine.InstallConfig.
 * Use `create(InstallConfigSchema)` to create a new message.
 */
export const InstallConfigSchema: GenMessage<InstallConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 137);

/**
 * @generated from message machine.MachineConfig
 */
export type MachineConfig = Message<"machine.MachineConfig"> & {
  /**
   * @generated from field: machine.MachineConfig.MachineType type = 1;
   */
  type: MachineConfig_MachineType;

  /**
   * @generated from field: machine.InstallConfig install_config = 2;
   */
  installConfig?: InstallConfig;

  /**
   * @generated from field: machine.NetworkConfig network_config = 3;
   */
  networkConfig?: NetworkConfig;

  /**
   * @generated from field: string kubernetes_version = 4;
   */
  kubernetesVersion: string;
};

/**
 * Describes the message machine.MachineConfig.
 * Use `create(MachineConfigSchema)` to create a new message.
 */
export const MachineConfigSchema: GenMessage<MachineConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 138);

/**
 * @generated from enum machine.MachineConfig.MachineType
 */
export enum MachineConfig_MachineType {
  /**
   * @generated from enum value: TYPE_UNKNOWN = 0;
   */
  TYPE_UNKNOWN = 0,

  /**
   * @generated from enum value: TYPE_INIT = 1;
   */
  TYPE_INIT = 1,

  /**
   * @generated from enum value: TYPE_CONTROL_PLANE = 2;
   */
  TYPE_CONTROL_PLANE = 2,

  /**
   * @generated from enum value: TYPE_WORKER = 3;
   */
  TYPE_WORKER = 3,
}

/**
 * Describes the enum machine.MachineConfig.MachineType.
 */
export const MachineConfig_MachineTypeSchema: GenEnum<MachineConfig_MachineType> = /*@__PURE__*/
  enumDesc(file_machine_machine, 138, 0);

/**
 * @generated from message machine.ControlPlaneConfig
 */
export type ControlPlaneConfig = Message<"machine.ControlPlaneConfig"> & {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint: string;
};

/**
 * Describes the message machine.ControlPlaneConfig.
 * Use `create(ControlPlaneConfigSchema)` to create a new message.
 */
export const ControlPlaneConfigSchema: GenMessage<ControlPlaneConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 139);

/**
 * @generated from message machine.CNIConfig
 */
export type CNIConfig = Message<"machine.CNIConfig"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: repeated string urls = 2;
   */
  urls: string[];
};

/**
 * Describes the message machine.CNIConfig.
 * Use `create(CNIConfigSchema)` to create a new message.
 */
export const CNIConfigSchema: GenMessage<CNIConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 140);

/**
 * @generated from message machine.ClusterNetworkConfig
 */
export type ClusterNetworkConfig = Message<"machine.ClusterNetworkConfig"> & {
  /**
   * @generated from field: string dns_domain = 1;
   */
  dnsDomain: string;

  /**
   * @generated from field: machine.CNIConfig cni_config = 2;
   */
  cniConfig?: CNIConfig;
};

/**
 * Describes the message machine.ClusterNetworkConfig.
 * Use `create(ClusterNetworkConfigSchema)` to create a new message.
 */
export const ClusterNetworkConfigSchema: GenMessage<ClusterNetworkConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 141);

/**
 * @generated from message machine.ClusterConfig
 */
export type ClusterConfig = Message<"machine.ClusterConfig"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: machine.ControlPlaneConfig control_plane = 2;
   */
  controlPlane?: ControlPlaneConfig;

  /**
   * @generated from field: machine.ClusterNetworkConfig cluster_network = 3;
   */
  clusterNetwork?: ClusterNetworkConfig;

  /**
   * @generated from field: bool allow_scheduling_on_control_planes = 4;
   */
  allowSchedulingOnControlPlanes: boolean;
};

/**
 * Describes the message machine.ClusterConfig.
 * Use `create(ClusterConfigSchema)` to create a new message.
 */
export const ClusterConfigSchema: GenMessage<ClusterConfig> = /*@__PURE__*/
  messageDesc(file_machine_machine, 142);

/**
 * GenerateConfigurationRequest describes a request to generate a new configuration
 * on a node.
 *
 * @generated from message machine.GenerateConfigurationRequest
 */
export type GenerateConfigurationRequest = Message<"machine.GenerateConfigurationRequest"> & {
  /**
   * @generated from field: string config_version = 1;
   */
  configVersion: string;

  /**
   * @generated from field: machine.ClusterConfig cluster_config = 2;
   */
  clusterConfig?: ClusterConfig;

  /**
   * @generated from field: machine.MachineConfig machine_config = 3;
   */
  machineConfig?: MachineConfig;

  /**
   * @generated from field: google.protobuf.Timestamp override_time = 4;
   */
  overrideTime?: Timestamp;
};

/**
 * Describes the message machine.GenerateConfigurationRequest.
 * Use `create(GenerateConfigurationRequestSchema)` to create a new message.
 */
export const GenerateConfigurationRequestSchema: GenMessage<GenerateConfigurationRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 143);

/**
 * GenerateConfiguration describes the response to a generate configuration request.
 *
 * @generated from message machine.GenerateConfiguration
 */
export type GenerateConfiguration = Message<"machine.GenerateConfiguration"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated bytes data = 2;
   */
  data: Uint8Array[];

  /**
   * @generated from field: bytes talosconfig = 3;
   */
  talosconfig: Uint8Array;
};

/**
 * Describes the message machine.GenerateConfiguration.
 * Use `create(GenerateConfigurationSchema)` to create a new message.
 */
export const GenerateConfigurationSchema: GenMessage<GenerateConfiguration> = /*@__PURE__*/
  messageDesc(file_machine_machine, 144);

/**
 * @generated from message machine.GenerateConfigurationResponse
 */
export type GenerateConfigurationResponse = Message<"machine.GenerateConfigurationResponse"> & {
  /**
   * @generated from field: repeated machine.GenerateConfiguration messages = 1;
   */
  messages: GenerateConfiguration[];
};

/**
 * Describes the message machine.GenerateConfigurationResponse.
 * Use `create(GenerateConfigurationResponseSchema)` to create a new message.
 */
export const GenerateConfigurationResponseSchema: GenMessage<GenerateConfigurationResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 145);

/**
 * @generated from message machine.GenerateClientConfigurationRequest
 */
export type GenerateClientConfigurationRequest = Message<"machine.GenerateClientConfigurationRequest"> & {
  /**
   * Roles in the generated client certificate.
   *
   * @generated from field: repeated string roles = 1;
   */
  roles: string[];

  /**
   * Client certificate TTL.
   *
   * @generated from field: google.protobuf.Duration crt_ttl = 2;
   */
  crtTtl?: Duration;
};

/**
 * Describes the message machine.GenerateClientConfigurationRequest.
 * Use `create(GenerateClientConfigurationRequestSchema)` to create a new message.
 */
export const GenerateClientConfigurationRequestSchema: GenMessage<GenerateClientConfigurationRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 146);

/**
 * @generated from message machine.GenerateClientConfiguration
 */
export type GenerateClientConfiguration = Message<"machine.GenerateClientConfiguration"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * PEM-encoded CA certificate.
   *
   * @generated from field: bytes ca = 2;
   */
  ca: Uint8Array;

  /**
   * PEM-encoded generated client certificate.
   *
   * @generated from field: bytes crt = 3;
   */
  crt: Uint8Array;

  /**
   * PEM-encoded generated client key.
   *
   * @generated from field: bytes key = 4;
   */
  key: Uint8Array;

  /**
   * Client configuration (talosconfig) file content.
   *
   * @generated from field: bytes talosconfig = 5;
   */
  talosconfig: Uint8Array;
};

/**
 * Describes the message machine.GenerateClientConfiguration.
 * Use `create(GenerateClientConfigurationSchema)` to create a new message.
 */
export const GenerateClientConfigurationSchema: GenMessage<GenerateClientConfiguration> = /*@__PURE__*/
  messageDesc(file_machine_machine, 147);

/**
 * @generated from message machine.GenerateClientConfigurationResponse
 */
export type GenerateClientConfigurationResponse = Message<"machine.GenerateClientConfigurationResponse"> & {
  /**
   * @generated from field: repeated machine.GenerateClientConfiguration messages = 1;
   */
  messages: GenerateClientConfiguration[];
};

/**
 * Describes the message machine.GenerateClientConfigurationResponse.
 * Use `create(GenerateClientConfigurationResponseSchema)` to create a new message.
 */
export const GenerateClientConfigurationResponseSchema: GenMessage<GenerateClientConfigurationResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 148);

/**
 * @generated from message machine.PacketCaptureRequest
 */
export type PacketCaptureRequest = Message<"machine.PacketCaptureRequest"> & {
  /**
   * Interface name to perform packet capture on.
   *
   * @generated from field: string interface = 1;
   */
  interface: string;

  /**
   * Enable promiscuous mode.
   *
   * @generated from field: bool promiscuous = 2;
   */
  promiscuous: boolean;

  /**
   * Snap length in bytes.
   *
   * @generated from field: uint32 snap_len = 3;
   */
  snapLen: number;

  /**
   * BPF filter.
   *
   * @generated from field: repeated machine.BPFInstruction bpf_filter = 4;
   */
  bpfFilter: BPFInstruction[];
};

/**
 * Describes the message machine.PacketCaptureRequest.
 * Use `create(PacketCaptureRequestSchema)` to create a new message.
 */
export const PacketCaptureRequestSchema: GenMessage<PacketCaptureRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 149);

/**
 * @generated from message machine.BPFInstruction
 */
export type BPFInstruction = Message<"machine.BPFInstruction"> & {
  /**
   * @generated from field: uint32 op = 1;
   */
  op: number;

  /**
   * @generated from field: uint32 jt = 2;
   */
  jt: number;

  /**
   * @generated from field: uint32 jf = 3;
   */
  jf: number;

  /**
   * @generated from field: uint32 k = 4;
   */
  k: number;
};

/**
 * Describes the message machine.BPFInstruction.
 * Use `create(BPFInstructionSchema)` to create a new message.
 */
export const BPFInstructionSchema: GenMessage<BPFInstruction> = /*@__PURE__*/
  messageDesc(file_machine_machine, 150);

/**
 * @generated from message machine.NetstatRequest
 */
export type NetstatRequest = Message<"machine.NetstatRequest"> & {
  /**
   * @generated from field: machine.NetstatRequest.Filter filter = 1;
   */
  filter: NetstatRequest_Filter;

  /**
   * @generated from field: machine.NetstatRequest.Feature feature = 2;
   */
  feature?: NetstatRequest_Feature;

  /**
   * @generated from field: machine.NetstatRequest.L4proto l4proto = 3;
   */
  l4proto?: NetstatRequest_L4proto;

  /**
   * @generated from field: machine.NetstatRequest.NetNS netns = 4;
   */
  netns?: NetstatRequest_NetNS;
};

/**
 * Describes the message machine.NetstatRequest.
 * Use `create(NetstatRequestSchema)` to create a new message.
 */
export const NetstatRequestSchema: GenMessage<NetstatRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 151);

/**
 * @generated from message machine.NetstatRequest.Feature
 */
export type NetstatRequest_Feature = Message<"machine.NetstatRequest.Feature"> & {
  /**
   * @generated from field: bool pid = 1;
   */
  pid: boolean;
};

/**
 * Describes the message machine.NetstatRequest.Feature.
 * Use `create(NetstatRequest_FeatureSchema)` to create a new message.
 */
export const NetstatRequest_FeatureSchema: GenMessage<NetstatRequest_Feature> = /*@__PURE__*/
  messageDesc(file_machine_machine, 151, 0);

/**
 * @generated from message machine.NetstatRequest.L4proto
 */
export type NetstatRequest_L4proto = Message<"machine.NetstatRequest.L4proto"> & {
  /**
   * @generated from field: bool tcp = 1;
   */
  tcp: boolean;

  /**
   * @generated from field: bool tcp6 = 2;
   */
  tcp6: boolean;

  /**
   * @generated from field: bool udp = 3;
   */
  udp: boolean;

  /**
   * @generated from field: bool udp6 = 4;
   */
  udp6: boolean;

  /**
   * @generated from field: bool udplite = 5;
   */
  udplite: boolean;

  /**
   * @generated from field: bool udplite6 = 6;
   */
  udplite6: boolean;

  /**
   * @generated from field: bool raw = 7;
   */
  raw: boolean;

  /**
   * @generated from field: bool raw6 = 8;
   */
  raw6: boolean;
};

/**
 * Describes the message machine.NetstatRequest.L4proto.
 * Use `create(NetstatRequest_L4protoSchema)` to create a new message.
 */
export const NetstatRequest_L4protoSchema: GenMessage<NetstatRequest_L4proto> = /*@__PURE__*/
  messageDesc(file_machine_machine, 151, 1);

/**
 * @generated from message machine.NetstatRequest.NetNS
 */
export type NetstatRequest_NetNS = Message<"machine.NetstatRequest.NetNS"> & {
  /**
   * @generated from field: bool hostnetwork = 1;
   */
  hostnetwork: boolean;

  /**
   * @generated from field: repeated string netns = 2;
   */
  netns: string[];

  /**
   * @generated from field: bool allnetns = 3;
   */
  allnetns: boolean;
};

/**
 * Describes the message machine.NetstatRequest.NetNS.
 * Use `create(NetstatRequest_NetNSSchema)` to create a new message.
 */
export const NetstatRequest_NetNSSchema: GenMessage<NetstatRequest_NetNS> = /*@__PURE__*/
  messageDesc(file_machine_machine, 151, 2);

/**
 * @generated from enum machine.NetstatRequest.Filter
 */
export enum NetstatRequest_Filter {
  /**
   * @generated from enum value: ALL = 0;
   */
  ALL = 0,

  /**
   * @generated from enum value: CONNECTED = 1;
   */
  CONNECTED = 1,

  /**
   * @generated from enum value: LISTENING = 2;
   */
  LISTENING = 2,
}

/**
 * Describes the enum machine.NetstatRequest.Filter.
 */
export const NetstatRequest_FilterSchema: GenEnum<NetstatRequest_Filter> = /*@__PURE__*/
  enumDesc(file_machine_machine, 151, 0);

/**
 * @generated from message machine.ConnectRecord
 */
export type ConnectRecord = Message<"machine.ConnectRecord"> & {
  /**
   * @generated from field: string l4proto = 1;
   */
  l4proto: string;

  /**
   * @generated from field: string localip = 2;
   */
  localip: string;

  /**
   * @generated from field: uint32 localport = 3;
   */
  localport: number;

  /**
   * @generated from field: string remoteip = 4;
   */
  remoteip: string;

  /**
   * @generated from field: uint32 remoteport = 5;
   */
  remoteport: number;

  /**
   * @generated from field: machine.ConnectRecord.State state = 6;
   */
  state: ConnectRecord_State;

  /**
   * @generated from field: uint64 txqueue = 7;
   */
  txqueue: bigint;

  /**
   * @generated from field: uint64 rxqueue = 8;
   */
  rxqueue: bigint;

  /**
   * @generated from field: machine.ConnectRecord.TimerActive tr = 9;
   */
  tr: ConnectRecord_TimerActive;

  /**
   * @generated from field: uint64 timerwhen = 10;
   */
  timerwhen: bigint;

  /**
   * @generated from field: uint64 retrnsmt = 11;
   */
  retrnsmt: bigint;

  /**
   * @generated from field: uint32 uid = 12;
   */
  uid: number;

  /**
   * @generated from field: uint64 timeout = 13;
   */
  timeout: bigint;

  /**
   * @generated from field: uint64 inode = 14;
   */
  inode: bigint;

  /**
   * @generated from field: uint64 ref = 15;
   */
  ref: bigint;

  /**
   * @generated from field: uint64 pointer = 16;
   */
  pointer: bigint;

  /**
   * @generated from field: machine.ConnectRecord.Process process = 17;
   */
  process?: ConnectRecord_Process;

  /**
   * @generated from field: string netns = 18;
   */
  netns: string;
};

/**
 * Describes the message machine.ConnectRecord.
 * Use `create(ConnectRecordSchema)` to create a new message.
 */
export const ConnectRecordSchema: GenMessage<ConnectRecord> = /*@__PURE__*/
  messageDesc(file_machine_machine, 152);

/**
 * @generated from message machine.ConnectRecord.Process
 */
export type ConnectRecord_Process = Message<"machine.ConnectRecord.Process"> & {
  /**
   * @generated from field: uint32 pid = 1;
   */
  pid: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message machine.ConnectRecord.Process.
 * Use `create(ConnectRecord_ProcessSchema)` to create a new message.
 */
export const ConnectRecord_ProcessSchema: GenMessage<ConnectRecord_Process> = /*@__PURE__*/
  messageDesc(file_machine_machine, 152, 0);

/**
 * @generated from enum machine.ConnectRecord.State
 */
export enum ConnectRecord_State {
  /**
   * @generated from enum value: RESERVED = 0;
   */
  RESERVED = 0,

  /**
   * @generated from enum value: ESTABLISHED = 1;
   */
  ESTABLISHED = 1,

  /**
   * @generated from enum value: SYN_SENT = 2;
   */
  SYN_SENT = 2,

  /**
   * @generated from enum value: SYN_RECV = 3;
   */
  SYN_RECV = 3,

  /**
   * @generated from enum value: FIN_WAIT1 = 4;
   */
  FIN_WAIT1 = 4,

  /**
   * @generated from enum value: FIN_WAIT2 = 5;
   */
  FIN_WAIT2 = 5,

  /**
   * @generated from enum value: TIME_WAIT = 6;
   */
  TIME_WAIT = 6,

  /**
   * @generated from enum value: CLOSE = 7;
   */
  CLOSE = 7,

  /**
   * @generated from enum value: CLOSEWAIT = 8;
   */
  CLOSEWAIT = 8,

  /**
   * @generated from enum value: LASTACK = 9;
   */
  LASTACK = 9,

  /**
   * @generated from enum value: LISTEN = 10;
   */
  LISTEN = 10,

  /**
   * @generated from enum value: CLOSING = 11;
   */
  CLOSING = 11,
}

/**
 * Describes the enum machine.ConnectRecord.State.
 */
export const ConnectRecord_StateSchema: GenEnum<ConnectRecord_State> = /*@__PURE__*/
  enumDesc(file_machine_machine, 152, 0);

/**
 * @generated from enum machine.ConnectRecord.TimerActive
 */
export enum ConnectRecord_TimerActive {
  /**
   * @generated from enum value: OFF = 0;
   */
  OFF = 0,

  /**
   * @generated from enum value: ON = 1;
   */
  ON = 1,

  /**
   * @generated from enum value: KEEPALIVE = 2;
   */
  KEEPALIVE = 2,

  /**
   * @generated from enum value: TIMEWAIT = 3;
   */
  TIMEWAIT = 3,

  /**
   * @generated from enum value: PROBE = 4;
   */
  PROBE = 4,
}

/**
 * Describes the enum machine.ConnectRecord.TimerActive.
 */
export const ConnectRecord_TimerActiveSchema: GenEnum<ConnectRecord_TimerActive> = /*@__PURE__*/
  enumDesc(file_machine_machine, 152, 1);

/**
 * @generated from message machine.Netstat
 */
export type Netstat = Message<"machine.Netstat"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated machine.ConnectRecord connectrecord = 2;
   */
  connectrecord: ConnectRecord[];
};

/**
 * Describes the message machine.Netstat.
 * Use `create(NetstatSchema)` to create a new message.
 */
export const NetstatSchema: GenMessage<Netstat> = /*@__PURE__*/
  messageDesc(file_machine_machine, 153);

/**
 * @generated from message machine.NetstatResponse
 */
export type NetstatResponse = Message<"machine.NetstatResponse"> & {
  /**
   * @generated from field: repeated machine.Netstat messages = 1;
   */
  messages: Netstat[];
};

/**
 * Describes the message machine.NetstatResponse.
 * Use `create(NetstatResponseSchema)` to create a new message.
 */
export const NetstatResponseSchema: GenMessage<NetstatResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 154);

/**
 * @generated from message machine.MetaWriteRequest
 */
export type MetaWriteRequest = Message<"machine.MetaWriteRequest"> & {
  /**
   * @generated from field: uint32 key = 1;
   */
  key: number;

  /**
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;
};

/**
 * Describes the message machine.MetaWriteRequest.
 * Use `create(MetaWriteRequestSchema)` to create a new message.
 */
export const MetaWriteRequestSchema: GenMessage<MetaWriteRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 155);

/**
 * @generated from message machine.MetaWrite
 */
export type MetaWrite = Message<"machine.MetaWrite"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.MetaWrite.
 * Use `create(MetaWriteSchema)` to create a new message.
 */
export const MetaWriteSchema: GenMessage<MetaWrite> = /*@__PURE__*/
  messageDesc(file_machine_machine, 156);

/**
 * @generated from message machine.MetaWriteResponse
 */
export type MetaWriteResponse = Message<"machine.MetaWriteResponse"> & {
  /**
   * @generated from field: repeated machine.MetaWrite messages = 1;
   */
  messages: MetaWrite[];
};

/**
 * Describes the message machine.MetaWriteResponse.
 * Use `create(MetaWriteResponseSchema)` to create a new message.
 */
export const MetaWriteResponseSchema: GenMessage<MetaWriteResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 157);

/**
 * @generated from message machine.MetaDeleteRequest
 */
export type MetaDeleteRequest = Message<"machine.MetaDeleteRequest"> & {
  /**
   * @generated from field: uint32 key = 1;
   */
  key: number;
};

/**
 * Describes the message machine.MetaDeleteRequest.
 * Use `create(MetaDeleteRequestSchema)` to create a new message.
 */
export const MetaDeleteRequestSchema: GenMessage<MetaDeleteRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 158);

/**
 * @generated from message machine.MetaDelete
 */
export type MetaDelete = Message<"machine.MetaDelete"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.MetaDelete.
 * Use `create(MetaDeleteSchema)` to create a new message.
 */
export const MetaDeleteSchema: GenMessage<MetaDelete> = /*@__PURE__*/
  messageDesc(file_machine_machine, 159);

/**
 * @generated from message machine.MetaDeleteResponse
 */
export type MetaDeleteResponse = Message<"machine.MetaDeleteResponse"> & {
  /**
   * @generated from field: repeated machine.MetaDelete messages = 1;
   */
  messages: MetaDelete[];
};

/**
 * Describes the message machine.MetaDeleteResponse.
 * Use `create(MetaDeleteResponseSchema)` to create a new message.
 */
export const MetaDeleteResponseSchema: GenMessage<MetaDeleteResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 160);

/**
 * @generated from message machine.ImageListRequest
 */
export type ImageListRequest = Message<"machine.ImageListRequest"> & {
  /**
   * Containerd namespace to use.
   *
   * @generated from field: common.ContainerdNamespace namespace = 1;
   */
  namespace: ContainerdNamespace;
};

/**
 * Describes the message machine.ImageListRequest.
 * Use `create(ImageListRequestSchema)` to create a new message.
 */
export const ImageListRequestSchema: GenMessage<ImageListRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 161);

/**
 * @generated from message machine.ImageListResponse
 */
export type ImageListResponse = Message<"machine.ImageListResponse"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string digest = 3;
   */
  digest: string;

  /**
   * @generated from field: int64 size = 4;
   */
  size: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message machine.ImageListResponse.
 * Use `create(ImageListResponseSchema)` to create a new message.
 */
export const ImageListResponseSchema: GenMessage<ImageListResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 162);

/**
 * @generated from message machine.ImagePullRequest
 */
export type ImagePullRequest = Message<"machine.ImagePullRequest"> & {
  /**
   * Containerd namespace to use.
   *
   * @generated from field: common.ContainerdNamespace namespace = 1;
   */
  namespace: ContainerdNamespace;

  /**
   * Image reference to pull.
   *
   * @generated from field: string reference = 2;
   */
  reference: string;
};

/**
 * Describes the message machine.ImagePullRequest.
 * Use `create(ImagePullRequestSchema)` to create a new message.
 */
export const ImagePullRequestSchema: GenMessage<ImagePullRequest> = /*@__PURE__*/
  messageDesc(file_machine_machine, 163);

/**
 * @generated from message machine.ImagePull
 */
export type ImagePull = Message<"machine.ImagePull"> & {
  /**
   * @generated from field: common.Metadata metadata = 1;
   */
  metadata?: Metadata;
};

/**
 * Describes the message machine.ImagePull.
 * Use `create(ImagePullSchema)` to create a new message.
 */
export const ImagePullSchema: GenMessage<ImagePull> = /*@__PURE__*/
  messageDesc(file_machine_machine, 164);

/**
 * @generated from message machine.ImagePullResponse
 */
export type ImagePullResponse = Message<"machine.ImagePullResponse"> & {
  /**
   * @generated from field: repeated machine.ImagePull messages = 1;
   */
  messages: ImagePull[];
};

/**
 * Describes the message machine.ImagePullResponse.
 * Use `create(ImagePullResponseSchema)` to create a new message.
 */
export const ImagePullResponseSchema: GenMessage<ImagePullResponse> = /*@__PURE__*/
  messageDesc(file_machine_machine, 165);

/**
 * The machine service definition.
 *
 * @generated from service machine.MachineService
 */
export const MachineService: GenService<{
  /**
   * @generated from rpc machine.MachineService.ApplyConfiguration
   */
  applyConfiguration: {
    methodKind: "unary";
    input: typeof ApplyConfigurationRequestSchema;
    output: typeof ApplyConfigurationResponseSchema;
  },
  /**
   * Bootstrap method makes control plane node enter etcd bootstrap mode.
   * Node aborts etcd join sequence and creates single-node etcd cluster.
   * If recover_etcd argument is specified, etcd is recovered from a snapshot
   * uploaded with EtcdRecover.
   *
   * @generated from rpc machine.MachineService.Bootstrap
   */
  bootstrap: {
    methodKind: "unary";
    input: typeof BootstrapRequestSchema;
    output: typeof BootstrapResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Containers
   */
  containers: {
    methodKind: "unary";
    input: typeof ContainersRequestSchema;
    output: typeof ContainersResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Copy
   */
  copy: {
    methodKind: "server_streaming";
    input: typeof CopyRequestSchema;
    output: typeof DataSchema;
  },
  /**
   * @generated from rpc machine.MachineService.CPUFreqStats
   */
  cPUFreqStats: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof CPUFreqStatsResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.CPUInfo
   */
  cPUInfo: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof CPUInfoResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.DiskStats
   */
  diskStats: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof DiskStatsResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Dmesg
   */
  dmesg: {
    methodKind: "server_streaming";
    input: typeof DmesgRequestSchema;
    output: typeof DataSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Events
   */
  events: {
    methodKind: "server_streaming";
    input: typeof EventsRequestSchema;
    output: typeof EventSchema;
  },
  /**
   * @generated from rpc machine.MachineService.EtcdMemberList
   */
  etcdMemberList: {
    methodKind: "unary";
    input: typeof EtcdMemberListRequestSchema;
    output: typeof EtcdMemberListResponseSchema;
  },
  /**
   * EtcdRemoveMemberByID removes a member from the etcd cluster identified by member ID.
   * This API should be used to remove members which don't have an associated Talos node anymore.
   * To remove a member with a running Talos node, use EtcdLeaveCluster API on the node to be removed.
   *
   * @generated from rpc machine.MachineService.EtcdRemoveMemberByID
   */
  etcdRemoveMemberByID: {
    methodKind: "unary";
    input: typeof EtcdRemoveMemberByIDRequestSchema;
    output: typeof EtcdRemoveMemberByIDResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.EtcdLeaveCluster
   */
  etcdLeaveCluster: {
    methodKind: "unary";
    input: typeof EtcdLeaveClusterRequestSchema;
    output: typeof EtcdLeaveClusterResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.EtcdForfeitLeadership
   */
  etcdForfeitLeadership: {
    methodKind: "unary";
    input: typeof EtcdForfeitLeadershipRequestSchema;
    output: typeof EtcdForfeitLeadershipResponseSchema;
  },
  /**
   * EtcdRecover method uploads etcd data snapshot created with EtcdSnapshot
   * to the node.
   * Snapshot can be later used to recover the cluster via Bootstrap method.
   *
   * @generated from rpc machine.MachineService.EtcdRecover
   */
  etcdRecover: {
    methodKind: "client_streaming";
    input: typeof DataSchema;
    output: typeof EtcdRecoverResponseSchema;
  },
  /**
   * EtcdSnapshot method creates etcd data snapshot (backup) from the local etcd instance
   * and streams it back to the client.
   * This method is available only on control plane nodes (which run etcd).
   *
   * @generated from rpc machine.MachineService.EtcdSnapshot
   */
  etcdSnapshot: {
    methodKind: "server_streaming";
    input: typeof EtcdSnapshotRequestSchema;
    output: typeof DataSchema;
  },
  /**
   * EtcdAlarmList lists etcd alarms for the current node.
   * This method is available only on control plane nodes (which run etcd).
   *
   * @generated from rpc machine.MachineService.EtcdAlarmList
   */
  etcdAlarmList: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EtcdAlarmListResponseSchema;
  },
  /**
   * EtcdAlarmDisarm disarms etcd alarms for the current node.
   * This method is available only on control plane nodes (which run etcd).
   *
   * @generated from rpc machine.MachineService.EtcdAlarmDisarm
   */
  etcdAlarmDisarm: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EtcdAlarmDisarmResponseSchema;
  },
  /**
   * EtcdDefragment defragments etcd data directory for the current node.
   * Defragmentation is a resource-heavy operation, so it should only run on a specific
   * node.
   * This method is available only on control plane nodes (which run etcd).
   *
   * @generated from rpc machine.MachineService.EtcdDefragment
   */
  etcdDefragment: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EtcdDefragmentResponseSchema;
  },
  /**
   * EtcdStatus returns etcd status for the current member.
   * This method is available only on control plane nodes (which run etcd).
   *
   * @generated from rpc machine.MachineService.EtcdStatus
   */
  etcdStatus: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EtcdStatusResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.GenerateConfiguration
   */
  generateConfiguration: {
    methodKind: "unary";
    input: typeof GenerateConfigurationRequestSchema;
    output: typeof GenerateConfigurationResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Hostname
   */
  hostname: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof HostnameResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Kubeconfig
   */
  kubeconfig: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof DataSchema;
  },
  /**
   * @generated from rpc machine.MachineService.List
   */
  list: {
    methodKind: "server_streaming";
    input: typeof ListRequestSchema;
    output: typeof FileInfoSchema;
  },
  /**
   * @generated from rpc machine.MachineService.DiskUsage
   */
  diskUsage: {
    methodKind: "server_streaming";
    input: typeof DiskUsageRequestSchema;
    output: typeof DiskUsageInfoSchema;
  },
  /**
   * @generated from rpc machine.MachineService.LoadAvg
   */
  loadAvg: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof LoadAvgResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Logs
   */
  logs: {
    methodKind: "server_streaming";
    input: typeof LogsRequestSchema;
    output: typeof DataSchema;
  },
  /**
   * @generated from rpc machine.MachineService.LogsContainers
   */
  logsContainers: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof LogsContainersResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Memory
   */
  memory: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof MemoryResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Mounts
   */
  mounts: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof MountsResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.NetworkDeviceStats
   */
  networkDeviceStats: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof NetworkDeviceStatsResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Processes
   */
  processes: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ProcessesResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Read
   */
  read: {
    methodKind: "server_streaming";
    input: typeof ReadRequestSchema;
    output: typeof DataSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Reboot
   */
  reboot: {
    methodKind: "unary";
    input: typeof RebootRequestSchema;
    output: typeof RebootResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Restart
   */
  restart: {
    methodKind: "unary";
    input: typeof RestartRequestSchema;
    output: typeof RestartResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Rollback
   */
  rollback: {
    methodKind: "unary";
    input: typeof RollbackRequestSchema;
    output: typeof RollbackResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Reset
   */
  reset: {
    methodKind: "unary";
    input: typeof ResetRequestSchema;
    output: typeof ResetResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.ServiceList
   */
  serviceList: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ServiceListResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.ServiceRestart
   */
  serviceRestart: {
    methodKind: "unary";
    input: typeof ServiceRestartRequestSchema;
    output: typeof ServiceRestartResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.ServiceStart
   */
  serviceStart: {
    methodKind: "unary";
    input: typeof ServiceStartRequestSchema;
    output: typeof ServiceStartResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.ServiceStop
   */
  serviceStop: {
    methodKind: "unary";
    input: typeof ServiceStopRequestSchema;
    output: typeof ServiceStopResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Shutdown
   */
  shutdown: {
    methodKind: "unary";
    input: typeof ShutdownRequestSchema;
    output: typeof ShutdownResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Stats
   */
  stats: {
    methodKind: "unary";
    input: typeof StatsRequestSchema;
    output: typeof StatsResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.SystemStat
   */
  systemStat: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof SystemStatResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Upgrade
   */
  upgrade: {
    methodKind: "unary";
    input: typeof UpgradeRequestSchema;
    output: typeof UpgradeResponseSchema;
  },
  /**
   * @generated from rpc machine.MachineService.Version
   */
  version: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof VersionResponseSchema;
  },
  /**
   * GenerateClientConfiguration generates talosctl client configuration (talosconfig).
   *
   * @generated from rpc machine.MachineService.GenerateClientConfiguration
   */
  generateClientConfiguration: {
    methodKind: "unary";
    input: typeof GenerateClientConfigurationRequestSchema;
    output: typeof GenerateClientConfigurationResponseSchema;
  },
  /**
   * PacketCapture performs packet capture and streams back pcap file.
   *
   * @generated from rpc machine.MachineService.PacketCapture
   */
  packetCapture: {
    methodKind: "server_streaming";
    input: typeof PacketCaptureRequestSchema;
    output: typeof DataSchema;
  },
  /**
   * Netstat provides information about network connections.
   *
   * @generated from rpc machine.MachineService.Netstat
   */
  netstat: {
    methodKind: "unary";
    input: typeof NetstatRequestSchema;
    output: typeof NetstatResponseSchema;
  },
  /**
   * MetaWrite writes a META key-value pair.
   *
   * @generated from rpc machine.MachineService.MetaWrite
   */
  metaWrite: {
    methodKind: "unary";
    input: typeof MetaWriteRequestSchema;
    output: typeof MetaWriteResponseSchema;
  },
  /**
   * MetaDelete deletes a META key.
   *
   * @generated from rpc machine.MachineService.MetaDelete
   */
  metaDelete: {
    methodKind: "unary";
    input: typeof MetaDeleteRequestSchema;
    output: typeof MetaDeleteResponseSchema;
  },
  /**
   * ImageList lists images in the CRI.
   *
   * @generated from rpc machine.MachineService.ImageList
   */
  imageList: {
    methodKind: "server_streaming";
    input: typeof ImageListRequestSchema;
    output: typeof ImageListResponseSchema;
  },
  /**
   * ImagePull pulls an image into the CRI.
   *
   * @generated from rpc machine.MachineService.ImagePull
   */
  imagePull: {
    methodKind: "unary";
    input: typeof ImagePullRequestSchema;
    output: typeof ImagePullResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_machine_machine, 0);

